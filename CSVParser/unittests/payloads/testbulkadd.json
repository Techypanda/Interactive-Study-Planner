{
  "resource": "/add",
  "path": "/add",
  "httpMethod": "POST",
  "headers": {
    "Accept": "*/*",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive",
    "Content-Length": "279",
    "Content-Type": "application/json",
    "Host": "localhost:3000",
    "Origin": "http://localhost:3000.com",
    "Postman-Token": "283ebe16-57db-414b-bb76-af599aedf0cd",
    "User-Agent": "PostmanRuntime/7.26.8",
    "X-Forwarded-Port": "3000",
    "X-Forwarded-Proto": "http"
  },
  "multiValueHeaders": {
    "Accept": [
      "*/*"
    ],
    "Accept-Encoding": [
      "gzip, deflate, br"
    ],
    "Connection": [
      "keep-alive"
    ],
    "Content-Length": [
      "279"
    ],
    "Content-Type": [
      "application/json"
    ],
    "Host": [
      "localhost:3000"
    ],
    "Origin": [
      "http://localhost:3000.com"
    ],
    "Postman-Token": [
      "283ebe16-57db-414b-bb76-af599aedf0cd"
    ],
    "User-Agent": [
      "PostmanRuntime/7.26.8"
    ],
    "X-Forwarded-Port": [
      "3000"
    ],
    "X-Forwarded-Proto": [
      "http"
    ]
  },
  "queryStringParameters": null,
  "multiValueQueryStringParameters": null,
  "pathParameters": {
    "operation": "add"
  },
  "stageVariables": null,
  "requestContext": {
    "accountId": "123456789012",
    "resourceId": "123456",
    "stage": "Dev",
    "domainName": "localhost:3000",
    "domainPrefix": "",
    "requestId": "99bcc809-c651-441b-b120-a3defc2b054d",
    "protocol": "HTTP/1.1",
    "identity": {
      "cognitoIdentityPoolId": "",
      "accountId": "",
      "cognitoIdentityId": "",
      "caller": "",
      "apiKey": "",
      "apiKeyId": "",
      "accessKey": "",
      "sourceIp": "127.0.0.1",
      "cognitoAuthenticationType": "",
      "cognitoAuthenticationProvider": "",
      "userArn": "",
      "userAgent": "Custom User Agent String",
      "user": ""
    },
    "resourcePath": "/add",
    "authorizer": null,
    "httpMethod": "POST",
    "requestTime": "31/May/2021:10:34:58 +0000",
    "requestTimeEpoch": 1622457298,
    "apiId": "1234567890"
  },
  "body": "{ \"csvData\": \"VU5JVA0KTUVESTEwMDANCkZvdW5kYXRpb25zIG9mIEJpb21lZGljYWwgU2NpZW5jZQ0KVGhpcyB1bml0IGlzIGFuIGludHJvZHVjdGlvbiB0byB0aGUgdGhlb3J5IGFuZCBhcHBsaWNhdGlvbiBvZiBkaXNjaXBsaW5lcyBpbiB0aGUgYmlvbWVkaWNhbCBzY2llbmNlczogbWljcm9iaW9sb2d5LCBpbW11bm9sb2d5LCBoaXN0b3BhdGhvbG9neSwgaGFlbWF0b2xvZ3ksIGJpb2NoZW1pc3RyeSBhbmQgbW9sZWN1bGFyIGdlbmV0aWNzLiBUaGVtZXMgaW5jbHVkZSB0aGUgYmFzaWMgdGhlb3J5IG9mIHRoZSBjZWxsdWxhciBhbmQgbW9sZWN1bGFyIGNvbXBvbmVudHMgdGhhdCBmb3JtIHRoZSBmb3VuZGF0aW9ucyBvZiBiaW9tZWRpY2FsIHNjaWVuY2UsIHRoZSBpbnZlc3RpZ2F0aW9uIG9mIGRpc2Vhc2UgYW5kIGluZmVjdGlvdXMgYWdlbnRzLCBvY2N1cGF0aW9uYWwgaGVhbHRoIGNvbnNpZGVyYXRpb25zLCB0aGUgdXNlIG9mIHNwZWNpYWxpemVkIGVxdWlwbWVudCBhbmQgdGVzdGluZyBvZiBiaW9sb2dpY2FsIHNhbXBsZXMgaW4gYSBwcm9mZXNzaW9uYWwgbWFubmVyLiBUaGUgcm9sZSBhbmQgZnVuY3Rpb24gb2YgbWVkaWNhbCBhbmQgcmVzZWFyY2ggbGFib3JhdG9yaWVzIHdpbGwgYWxzbyBiZSBleHBsb3JlZC4NCjI1DQpJbnRlcm5hbA0KDQoNCg0KVU5JVA0KSFVNQjEwMDANCkh1bWFuIFN0cnVjdHVyZSBhbmQgRnVuY3Rpb24NCkFuYXRvbWljYWwgb3JnYW5pc2F0aW9uIG9mIHRoZSBib2R5IGFuZCB0aGUgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIGJvZHkgc3lzdGVtcyBhbmQgY2VsbHMuIEh1bWFuIHJlcXVpcmVtZW50cyBmb3IgbWV0YWJvbGlzbSBhbmQgbGlmZS4gVGhlIHN0cnVjdHVyZSBhbmQgZnVuY3Rpb24gb2YgdGhlIGJvZHkgZnJvbSBjZWxscyB0byB0aGUgd2hvbGUgb3JnYW5pc20uIEJhc2ljIGNvbnRyb2wgYW5kIGludGVyYWN0aW9ucyBvZiB0aGUgY2lyY3VsYXRvcnksIHJlc3BpcmF0b3J5LCBkaWdlc3RpdmUgYW5kIGV4Y3JldG9yeSBzeXN0ZW1zIGZvciBob21lb3N0YXNpcy4gUHJpbWFyeSBkZWZlbmNlIGFnYWluc3QgbWljcm9vcmdhbmlzbXMuIE1lY2hhbmlzbXMgZm9yIGdyb3d0aCwgcmVwYWlyIGFuZCByZXByb2R1Y3Rpb24uDQoyNQ0KRnVsbHkgT25saW5lLEludGVybmFsDQoNCg0KMTY0Mw0KVU5JVA0KQklPTDEwMDQNCkZvdW5kYXRpb25zIG9mIEJpb3NjaWVuY2UgUHJhY3RpY2UNCkluIHRoaXMgdW5pdCBzdHVkZW50cyB3aWxsIGJlIGludHJvZHVjZWQgdG8gdGhlIGFwcGxpY2F0aW9uIG9mIGFjYWRlbWljIHN0YW5kYXJkcyBhbmQgZGV2ZWxvcG1lbnQgb2Ygc2tpbGxzIHJlcXVpcmVkIGZvciBzdHVkeWluZyBhdCB1bml2ZXJzaXR5LiBJbnRyb2R1Y3Rpb24gdG8gcmVxdWlyZW1lbnRzIGZvciBwcm9mZXNzaW9uYWwsIHNhZmUgYW5kIGFjY3VyYXRlIGxhYm9yYXRvcnkgcHJhY3RpY2UuIFN0dWRlbnRzIHdpbGwgbGVhcm4gbGFib3JhdG9yeSB0ZWNobmlxdWVzIHRvIGFwcGx5IGludHJvZHVjdG9yeSBDaGVtaXN0cnkga25vd2xlZGdlLCBhbmQgcHJhY3Rpc2UgYXMgZW1lcmdpbmcgc2NpZW50aXN0cyBjYXBhYmxlIG9mIHdvcmtpbmcgaW5kaXZpZHVhbGx5IGFuZCBpbiB0ZWFtcy4gSW50cm9kdWN0aW9uIHRvIGV0aGljcyBpbiB0aGUgY29udGV4dCBvZiBodW1hbiBhbmQgYW5pbWFsIHJlc2VhcmNoLiBJbnRyb2R1Y3Rpb24gdG8gY2FyZWVycyBmb3IgaGVhbHRoIHNjaWVudGlzdHMuDQoyNQ0KSW50ZXJuYWwNCg0KDQoNClVOSVQNCkNIRU0xMDA3DQpGdW5kYW1lbnRhbCBDaGVtaXN0cnkgZm9yIEJpb3NjaWVuY2VzDQoNCjI1DQpJbnRlcm5hbA0KQklPTDEwMDQNCkJJT0wxMDA0DQpDSEVNMTAwMSxDSEVNMTAwNQ0KVU5JVA0KSU5ESDEwMDYNCkluZGlnZW5vdXMgQ3VsdHVyZXMgYW5kIEhlYWx0aCBCZWhhdmlvdXJzDQpJbiB0aGlzIHVuaXQgc3R1ZGVudHMgd2lsbCBleGFtaW5lIGN1bHR1cmUgYW5kIGRpdmVyc2l0eSB3aXRoaW4gbG9jYWwsIG5hdGlvbmFsIGFuZCBnbG9iYWwgSW5kaWdlbm91cyBwb3B1bGF0aW9uczsgaW1wYWN0cyBvZiBzcGVjaWZpYyBwb2xpY2llcyBhbmQgaGlzdG9yaWNhbCBldmVudHMgb24gSW5kaWdlbm91cyBBdXN0cmFsaWFucyBhbmQgdGhlIGVmZmVjdHMgb2YgdGhlc2UgcG9saWNpZXMgb24gaGVhbHRoLCBpbGxuZXNzIGFuZCBkaXNhYmlsaXR5LCBhbmQgaGVhbHRoIGNhcmUgYWNjZXNzLiBBcHBseWluZyB0aGVvcmllcyBvZiBoZWFsdGggYmVoYXZpb3VyIHN0dWRlbnRzIHdpbGwgYW5hbHlzZSBoZWFsdGggb3V0Y29tZXMgb2YgSW5kaWdlbm91cyBBdXN0cmFsaWFucyBhbmQgZXhwbG9yZSB1bmRlcmx5aW5nIHNvY2lhbCwgZW52aXJvbm1lbnRhbCwgcHN5Y2hvbG9naWNhbCBhbmQgYmlvbG9naWNhbCBkZXRlcm1pbmFudHMuIFdpdGhpbiBhIHByaW1hcnkgaGVhbHRoIGNhcmUgbW9kZWwsIHN0dWRlbnRzIHdpbGwgZXhwbG9yZSBob3cgaGVhbHRoIHByb2Zlc3Npb25hbHMgY2FuIHdvcmsgaW50ZXItcHJvZmVzc2lvbmFsbHkgYW5kIGluIHBhcnRuZXJzaGlwIHdpdGggSW5kaWdlbm91cyBpbmRpdmlkdWFscywgZmFtaWxpZXMsIGNvbW11bml0aWVzIGFuZCBvcmdhbmlzYXRpb25zLg0KMjUNCkludGVybmFsLEZ1bGx5IE9ubGluZQ0KQklPTDEwMDQ7Q01ITDEwMDA7TlVSUzEwMDA7MzEzMDI2OzMxMzM5NA0KDQpJTkRIMTAwMA0KVU5JVA0KRVBJRDEwMDANCkZvdW5kYXRpb25zIG9mIEJpb3N0YXRpc3RpY3MgYW5kIEVwaWRlbWlvbG9neQ0KRm91bmRhdGlvbnMgb2YgQmlvc3RhdGlzdGljcyBhbmQgRXBpZGVtaW9sb2d5IGVuYWJsZXMgc3R1ZGVudHMgdG8gbGVhcm4gY29yZSBza2lsbHMgaW4gZXBpZGVtaW9sb2d5IGFuZCBiaW9zdGF0aXN0aWNzLiBTdHVkZW50cyBjcml0aWNhbGx5IGFwcHJhaXNlIHB1YmxpYyBoZWFsdGggYW5kIGNsaW5pY2FsIGVwaWRlbWlvbG9naWNhbCByZXNlYXJjaCBsaXRlcmF0dXJlIGFuZCBwZXJmb3JtIGJhc2ljIHN0YXRpc3RpY2FsIGFuYWx5c2lzLiBTdHVkZW50cyB3aWxsIGVuY291bnRlciBiYXNpYyBzdGF0aXN0aWNhbCBhbmQgZ3JhcGhpY2FsIGRlc2NyaXB0aW9uIGFuZCBhbmFseXNpcyBvZiBlcGlkZW1pb2xvZ2ljYWwgYW5kIGJpb21lZGljYWwgZGF0YSB3aXRoIGFwcHJvcHJpYXRlIGdyYXBocywgdGFibGVzLCBhbmQgc3VtbWFyeSBtZWFzdXJlczsgc3RhdGlzdGljYWwgaW5mZXJlbmNlIGFuZCBzdGF0aXN0aWNhbCBoeXBvdGhlc2lzIHRlc3RpbmcgYXBwbGllZCB0byBwcm9ibGVtcyBpbiBoZWFsdGggYW5kIGNsaW5pY2FsIG1lZGljaW5lIHVzaW5nIHBhcmFtZXRyaWMgYW5kIG5vbi1wYXJhbWV0cmljIHRlc3RzOyBjYWxjdWxhdGlvbiBvZiBjb21tb24gZXBpZGVtaW9sb2dpY2FsIG1lYXN1cmVzIG9mIGRpc2Vhc2UgZnJlcXVlbmN5IGFuZCBhc3NvY2lhdGlvbiBzdWNoIGFzIGluY2lkZW5jZSByYXRlLCBwcmV2YWxlbmNlLCBhdHRyaWJ1dGFibGUgcmlzaywgcmlzayByYXRpb3MgYW5kIG9kZHMgcmF0aW87IHJvbGUgYW5kIHNpZ25pZmljYW5jZSBvZiBpbmZlcmVudGlhbCBzdGF0aXN0aWNzIHN1Y2ggYXMgY29uZmlkZW5jZSBpbnRlcnZhbHMgYW5kIHByb2JhYmlsaXR5IHZhbHVlcy4gVmFyaW91cyBlcGlkZW1pb2xvZ2ljYWwgcmVzZWFyY2ggZGVzaWducyBhbmQgdGhlaXIgc3RyZW5ndGhzIGFuZCBsaW1pdGF0aW9ucyBhcyB3ZWxsIGFzIHRocmVhdHMgdG8gdGhlIGludGVybmFsIHZhbGlkaXR5OyByb2xlIG9mIGNoYW5jZSwgYmlhcyBhbmQgY29uZm91bmRpbmcgYXJlIGluY2x1ZGVkLg0KMjUNCkludGVybmFsLEZ1bGx5IE9ubGluZQ0KDQoNCg0KVU5JVA0KSFVNQjEwMDENCkludGVncmF0ZWQgU3lzdGVtcyBBbmF0b215IGFuZCBQaHlzaW9sb2d5DQpBbiBpbnRlZ3JhdGVkIGFwcHJvYWNoIHRvIHRoZSBzdHVkeSBvZiBib2R5IHN5c3RlbXMgY29ycmVsYXRpbmcgc3RydWN0dXJlIGFuZCBmdW5jdGlvbiBvZiB0aGUgbXVzY3Vsb3NrZWxldGFsLCBjYXJkaW92YXNjdWxhciwgcmVzcGlyYXRvcnksIGRpZ2VzdGl2ZSwgdXJpbmFyeSBhbmQgcmVwcm9kdWN0aXZlIHN5c3RlbXMgdG9nZXRoZXIgd2l0aCB0aGVpciBlbmRvY3JpbmUgYW5kIG5ldXJhbCBjb250cm9sLiBTdHVkZW50cyB3aWxsIGludmVzdGlnYXRlIHRoZSBpbnRlcmFjdGlvbiBvZiB0aGVzZSBzeXN0ZW1zIGluIG5vcm1hbCBib2R5IGZ1bmN0aW9uaW5nIGFuZCBpbiBzZWxlY3RlZCBhbHRlcmVkIGJvZHkgc3RhdGVzLg0KMjUNCkludGVybmFsLEZ1bGx5IE9ubGluZQ0KSFVNQjEwMDA7MzEzMzkxOzE2NDM7MzAzMTQ5OzMxMTAyMg0KDQoxNjQ0DQpVTklUDQpHRU5FMTAwMA0KTW9sZWN1bGFyIEdlbmV0aWNzIGFuZCBDZWxsIEJpb2xvZ3kNCkluIHRoaXMgdW5pdCwgc3R1ZGVudHMgd2lsbCBleHBsb3JlIHRoZSBmdW5kYW1lbnRhbCBjb25jZXB0cyBvZiBtb2xlY3VsYXIgYW5kIGNlbGwgYmlvbG9neSwgaW5jbHVkaW5nIHRoZSBjZW50cmFsIGRvZ21hLCB0cmFkaXRpb25hbCBNZW5kZWxpYW4sIGFuZCBtb2Rlcm4gbW9sZWN1bGFyIGdlbmV0aWNzLiBUb3BpY3Mgd2lsbCBpbmNsdWRlIEROQSBzdHJ1Y3R1cmUgYW5kIHJlcGxpY2F0aW9uOyByZWd1bGF0aW9uIG9mIGdlbmUgdHJhbnNjcmlwdGlvbjsgcHJvdGVpbiBzeW50aGVzaXMgYW5kIHBvc3QtdHJhbnNsYXRpb25hbCBtb2RpZmljYXRpb24uIENlbGwgc3RydWN0dXJlIGFuZCBmdW5jdGlvbiB3aWxsIGFsc28gYmUgZXhwbG9yZWQuIFRoZSBsYWJvcmF0b3J5IGNvbXBvbmVudCBhbGxvd3Mgc3R1ZGVudHMgdG8gYWNxdWlyZSBza2lsbHMgdG8gcGVyZm9ybSBleHBlcmltZW50cyBpbiBtb2xlY3VsYXIgYW5kIGNlbGwgYmlvbG9neS4gVGhpcyB1bml0IHByb3ZpZGVzIHRoZSBiYWNrZ3JvdW5kIGtub3dsZWRnZSBuZWNlc3NhcnkgZm9yIGVudHJ5IGludG8gc2Vjb25kIHllYXIgdW5pdHMuDQoyNQ0KSW50ZXJuYWwNCk1FREkxMDAwDQoNCg0KTUFKT1INCk1KUlUtSFVNQk0NCkh1bWFuIEJpb21lZGljaW5lDQpUaGlzIG1ham9yL3N0cmVhbSBpcyBwYXJ0IG9mIGEgbGFyZ2VyIGNvdXJzZS4gSW5mb3JtYXRpb24gaXMgc3BlY2lmaWMgdG8gdGhlIG1ham9yL3N0cmVhbSwgcGxlYXNlIHJlZmVyIHRvIHRoZSBjb3Vyc2UgZm9yIG1vcmUgaW5mb3JtYXRpb24uIEJpb21lZGljaW5lIGlzIHRoZSBhcHBsaWNhdGlvbiBvZiBiaW9sb2dpY2FsIGFuZCBwaHlzaW9sb2dpY2FsIHByaW5jaXBsZXMgdG8gY2xpbmljYWwgcHJhY3RpY2UuIEluIHRoaXMgbWFqb3IsIHN0dWRlbnRzIHdpbGwgY29tcGxldGUgc2lnbmlmaWNhbnQgaW50ZWdyYXRlZCBzdHVkeSBpbiBhcHBsaWVkIGh1bWFuIGFuYXRvbXksIHBoeXNpb2xvZ3ksIGFuZCBuZXVyb3NjaWVuY2UuIFN0dWRlbnRzIHdpbGwgZ2FpbiB2YWx1YWJsZSBoYW5kcy1vbiBleHBlcmllbmNlIGluIG91ciBoaWdoLXF1YWxpdHkgbGFib3JhdG9yeSBmYWNpbGl0aWVzIHVzaW5nIGNhZGF2ZXJpYyBzcGVjaW1lbnMgYW5kIHBoeXNpb2xvZ3kgZXF1aXBtZW50LiBUaGUgSHVtYW4gUGF0aG9sb2d5IGV4dGVuc2lvbiBzcGVjaWFsaXNhdGlvbiB3aWxsIGFsbG93IHN0dWRlbnRzIHRvIGV4dGVuZCB0aGVpciBzdHVkaWVzIGludG8gQ2xpbmljYWwgUGF0aG9waHlzaW9sb2d5IGFuZCBOZXVyb3BoeXNpb2xvZ3ksIGFuZCBtb3JlIGJyb2FkbHkgcHJlcGFyZSB0aGVtIGZvciBhIGNhcmVlciBpbiBjbGluaWNhbCBoZWFsdGguc2VydmljZXMuDQoyMDANCkhVTUIyMDEzLEhVTUIyMDE0LEhVTUIyMDExLEhVTUIyMDEyLEVDRVYzMDA0LEhVTUIzMDA5LEJJT0wzMDEwLEhVTUIzMDAzDQoNCg0KVU5JVA0KSFVNQjIwMTMNClRydW5rIEFuYXRvbXkgYW5kIEVtYnJ5b2xvZ3kNCkV4cGxvcmVzIHRoZSByZWxhdGlvbnNoaXBzIGJldHdlZW4gc3RydWN0dXJlLCBmdW5jdGlvbiBhbmQgZW1icnlvbG9naWNhbCBkZXZlbG9wbWVudCBvZiB0aGUgc29tYXRpYyBhbmQgdmlzY2VyYWwgY29tcG9uZW50cyBvZiB0aGUgbmVjaywgdGhvcmF4LCBhYmRvbWVuIGFuZCBwZWx2aXMuDQoyNQ0KSW50ZXJuYWwNCkhVTUIxMDA1O0hVTUIxMDAyO0hVTUIxMDAxO0hVTUIxMDA0DQoNCg0KVU5JVA0KSFVNQjIwMTQNClZpdGFsIFBoeXNpb2xvZ3kNClBoeXNpb2xvZ3kgaXMgdGhlIHN0dWR5IG9mIHRoZSBmdW5jdGlvbnMgb2YgYW4gb3JnYW5pc20uIFRoaXMgdW5pdCBsb29rcyBhdCB0aGUgcGh5c2lvbG9naWNhbCB1bmRlcnBpbm5pbmcgb2YgdGhlIHN1cHBseSBhbmQgcmVtb3ZhbCBvZiBveHlnZW4sIHdhdGVyIGFuZCB3YXN0ZSBwcm9kdWN0cyB0byBhbmQgZnJvbSB0aXNzdWVzLCBhbmQgdGhlIG1lY2hhbmlzbXMgdGhhdCByZWd1bGF0ZSB0aGVzZSB3aXRoaW4gaG9tZW9zdGF0aWMgbGltaXRzLg0KMjUNCkludGVybmFsDQpIVU1CMTAwMQ0KDQoNClVOSVQNCkhVTUIyMDExDQpMaW1iIEFuYXRvbXkgYW5kIEJpb21lY2hhbmljcw0KVGhlIHVuaXQgZXhwbG9yZXMsIGluIGRldGFpbCwgdGhlIGZ1bmN0aW9uYWwgYW5hdG9teSBvZiB0aGUgdXBwZXIgYW5kIGxvd2VyIGxpbWIgYW5kIHRoZWlyIGFzc29jaWF0ZWQgZ2lyZGxlcy4gQXBwbGljYXRpb25zIG9mIGFuYXRvbWljYWwgYW5kIGJpb21lY2hhbmljYWwgcHJpbmNpcGxlcyBpbiBhbmFseXNpcyBvZiB1cHBlciBhbmQgbG93ZXIgbGltYiBmdW5jdGlvbiBhbmQgZHlzZnVuY3Rpb24gd2lsbCBhbHNvIGJlIGNvdmVyZWQuDQoyNQ0KSW50ZXJuYWwNCkhVTUIxMDA1O0hVTUIxMDAyO0hVTUIxMDAxO0hVTUIxMDA0DQoNCg0KVU5JVA0KSFVNQjIwMTINClBoeXNpb2xvZ2ljYWwgUHJvY2Vzc2VzDQpQaHlzaW9sb2d5IGlzIHRoZSBzdHVkeSBvZiB0aGUgZnVuY3Rpb25zIG9mIGFuIG9yZ2FuaXNtLiBUaGlzIHVuaXQgZXhhbWluZXMgc2V2ZXJhbCBmdW5kYW1lbnRhbCBib2R5IGZ1bmN0aW9ucywgZS5nLiwgYWJzb3JwdGlvbiwgc2VjcmV0aW9uLCBjb21tdW5pY2F0aW9uLCB0cmFuc3BvcnQgYW5kIG1vdmVtZW50LCBmcm9tIGEgcGh5c2lvbG9naWNhbCBwZXJzcGVjdGl2ZS4gVGhlc2UgdGhlbWVzIGFyZSBhZGRyZXNzZWQgd2l0aGluIGZpdmUgbW9kdWxlczogY2VsbHVsYXIgcGh5c2lvbG9neTsgbmVydmUgJiBtdXNjbGUgcGh5c2lvbG9neTsgY2VsbHVsYXIgY29tbXVuaWNhdGlvbjsgZW5kb2NyaW5lIHBoeXNpb2xvZ3kgYW5kIGVuZXJneSBtZXRhYm9saXNtLg0KMjUNCkludGVybmFsDQpIVU1CMTAwMQ0KDQoNClVOSVQNCkVDRVYzMDA0DQpIdW1hbiBFdm9sdXRpb24NCkZyb20gdGhlb3JpZXMgb2YgZWFybHkgSG9tbyBvcmlnaW5zLCB0byB0aGUgZXZvbHV0aW9uIGFuZCBvcmlnaW5zIG9mIG1vZGVybiBodW1hbnMsIHdpdGggcGFydGljdWxhciBpbnRlcmVzdCBpbiBhYm9yaWdpbmFsIG9yaWdpbnMgKGZpcnN0IHBlb3BsZXMpLCB0aGlzIHVuaXQgZXhwbG9yZXMgdGhlb3JpZXMgb2YgaHVtYW4gZXZvbHV0aW9uLCBwcmVoaXN0b3J5LCBwcmltYXRlIGNoYXJhY3RlcmlzdGljcyBhbmQgZm9zc2lsIHJlY29yZHMuIExhYm9yYXRvcnkgd29yayByZWxhdGVzIHRvIHRoZSBtZXRob2RvbG9neSBvZiBwaHlzaWNhbCBhbnRocm9wb2xvZ3ksIGNvbXBhcmF0aXZlIGFuYXRvbXksIHRoZSBhbmFseXNpcyBvZiBib25lLCB0ZWV0aCBhbmQgc3RvbmUgdG9vbHMuIE1ldGhvZHMgb2YgcGh5bG9nZW5ldGljIGFuYWx5c2lzLCBpbmNsdWRpbmcgTnVtZXJpY2FsIFRheG9ub215IGFuZCBDbGFkaXN0aWNzIHVzaW5nIGNvbXB1dGVyIHNvZnR3YXJlIGFyZSB1dGlsaXNlZCBpbiB0aGlzIHVuaXQuIFN0dWRlbnRzIHdpbGwgZGV2ZWxvcCBjb21wZXRlbmNlIGluIGV4dHJhY3RpbmcgbWF4aW11bSBpbmZvcm1hdGlvbiBmcm9tIG1pbmltYWwgdHJhY2VzLCBhbmQgZGV2ZWxvcGluZyBhIGNyaXRpY2FsIGFwcHJvYWNoIHRvIG1ha2luZyBpbmZlcmVuY2VzLiBQYWxlb250b2xvZ2ljYWwgcGVyc3BlY3RpdmVzIGFyZSBjb3ZlcmVkLg0KMjUNCkludGVybmFsDQpIVU1CMjAwMjtIVU1CMjAxMTtIVU1CMjAxMw0KDQoNClVOSVQNCkhVTUIyMDAyDQpBbmF0b215IG9mIHRoZSBMaW1icw0KQW5hdG9teSBvZiB0aGUgTGltYnMgZXhwbG9yZXMgdGhlIHByaW5jaXBsZXMgb2YgYmlvbWVjaGFuaWNzOiBzcGVjaWZpY2FsbHkgbGV2ZXJzLCB0b3JxdWVzLCBmb3JjZSB2ZWN0b3JzIGFuZCBjZW50cmUgb2YgZ3Jhdml0eSwgYXMgcmVsYXRlZCB0byB0aGUgaHVtYW4gYm9keS4gVGhlIHVuaXQgZXhwbG9yZXMsIGluIGRldGFpbCwgdGhlIGZ1bmN0aW9uYWwgYW5hdG9teSBvZiB0aGUgdXBwZXIgYW5kIGxvd2VyIGxpbWIgYW5kIHRoZWlyIGFzc29jaWF0ZWQgZ2lyZGxlcy4gQXBwbGljYXRpb25zIG9mIGFuYXRvbWljYWwgYW5kIGJpb21lY2hhbmljYWwgcHJpbmNpcGxlcyBpbiBhbmFseXNpcyBvZiB1cHBlciBhbmQgbG93ZXIgbGltYiBmdW5jdGlvbiBhbmQgZHlzZnVuY3Rpb24gd2lsbCBhbHNvIGJlIGNvdmVyZWQuDQoyNQ0KSW50ZXJuYWwNCkhVTUIxMDAyO0hVTUIxMDAxOzE2NDQ7MzEzNDAxOzMxMzM5OQ0KDQoNClVOSVQNCkhVTUIzMDA5DQpOZXVyb2FuYXRvbXkNCkdyb3NzIG9yZ2FuaXNhdGlvbiBvZiB0aGUgaHVtYW4gYnJhaW4gaW4gcmVsYXRpb24gdG8gaXRzIGVtYnJ5b2xvZ2ljYWwgZGV2ZWxvcG1lbnQ7IEZ1bmN0aW9uYWwgYW5hdG9teSBvZiB0aGUgbXVzY3Vsb3NrZWxldGFsIHN0cnVjdHVyZXMsIHZpc2NlcmEgYW5kIG5lcnZlcyBvZiB0aGUgY3Jhbml1bTsgSW52ZXN0aWdhdGlvbiBvZiB0aGUgbmV1cmFsIHN5c3RlbXMgdGhhdCBzZXJ2ZSB0aGUgc2Vuc2VzIGFuZCBjb21tYW5kIHZvbHVudGFyeSBtb3ZlbWVudDsgSG93IGNoYW5nZXMgdG8gdGhlIGludGVybmFsIGFuZCBleHRlcm5hbCBlbnZpcm9ubWVudCBpbmZsdWVuY2VzIHRoZSBicmFpbjsgRXhwbG9yYXRpb24gb2YgdGhlIG5ldXJvYmlvbG9neSBvZiBodW1hbiBiZWhhdmlvdXIuIEludGVncmF0aW9uIG9mIHRoZSByb2xlIG9mIHN0cnVjdHVyZXMgb2YgdGhlIGhlYWQgd2l0aCBodW1hbiBkZXZlbG9wbWVudCBhbmQgc3Vydml2YWwuIE5ldXJvdmFzY3VsYXIgYW5kIG11c2N1bG9za2VsZXRhbCBjb21wb25lbnRzIG9mIHRoZSBoZWFkIGFyZSBleHBsb3JlZCwgd2l0aCByZWZlcmVuY2UgdG8gZnVuY3Rpb25hbCBjb250cm9sIG1lY2hhbmlzbXMuDQoyNQ0KSW50ZXJuYWwNCkhVTUIxMDA1O0hVTUIxMDAyO0hVTUIxMDAxO0hVTUIxMDA0DQoNCg0KVU5JVA0KQklPTDMwMTANCkJpb3NjaWVuY2VzIFJlc2VhcmNoIFByb2plY3QNCkluIHRoaXMgdW5pdCBzdHVkZW50cyB3aWxsIGJlIHByb3ZpZGVkIHdpdGggYW4gaW50cm9kdWN0aW9uIHRvIHJlc2VhcmNoIHdpdGhpbiB0aGUgQmlvc2NpZW5jZXMuIFRoZSB1bml0IHdpbGwgZm9jdXMgb24gdGhlIHBoaWxvc29waHkgb2Ygc2NpZW5jZSwgcmVzZWFyY2ggZGVzaWduLCBldGhpY2FsIGNvbmR1Y3QsIGNyaXRpY2FsIGFuYWx5c2lzIG9mIHRoZSByZWxldmFudCBzY2llbnRpZmljIGxpdGVyYXR1cmUgdG8gZGV2ZWxvcCBhIGxpdGVyYXR1cmUgcmV2aWV3LCBoeXBvdGhlc2lzIGFuZCBhaW1zLCBkYXRhIGNvbGxlY3Rpb24gYW5kIGFuYWx5c2lzIGFuZCByZXBvcnRpbmcuDQoyNQ0KSW50ZXJuYWwNCkVQSUQxMDAwLEhVTUIzMDA5DQoNCg0KVU5JVA0KSFVNQjMwMDMNCk5ldXJvc2NpZW5jZQ0KTmVydm91cyBzeXN0ZW0gZGV2ZWxvcG1lbnQsIG92ZXJ2aWV3LCBwbGFzdGljaXR5LCBibG9vZCBzdXBwbHksIG1lbmluZ2VzLCBDU0YsIHJlY2VwdG9ycywgc29tYXRvc2Vuc2F0aW9uLCB2aXN1YWwsIGF1ZGl0b3J5IHZlc3RpYnVsYXIgcGVyY2VwdGlvbiwgY29ydGljYWwsIGNlcmViZWxsYXIgYW5kIGJyYWluc3RlbSBjb250cm9sIG9mIG1vdmVtZW50LiBIeXBvdGhhbGFtdXMgc3RydWN0dXJlIGFuZCByb2xlIHdpdGggYXV0b25vbWljIG5lcnZvdXMgc3lzdGVtIGZ1bmN0aW9uLCBjb250cm9sIGFuZCBpbnRlcmFjdGlvbiB3aXRoIGNlcmVicmFsIGZ1bmN0aW9uLiBUaGUgcm9sZSBvZiB0aGUgbGltYmljIHN5c3RlbSBpbiBlbW90aW9uLCBsZWFybmluZyBhbmQgbWVtb3J5LiBCZWhhdmlvdXIsIHNsZWVwICYgZHJlYW1pbmcsIGh1bmdlciAmIHRoaXJzdC4NCjI1DQpJbnRlcm5hbA0KSFVNQjIwMDA7SFVNQjMwMDk7MzE0MjM2DQoNCg0KTUFKT1INCk1KUlUtTU9MR04NCk1vbGVjdWxhciBHZW5ldGljcw0KTW9sZWN1bGFyIEdlbmV0aWNzIGlzIGEgcmFwaWRseSBhZHZhbmNpbmcgYW5kIGV4Y2l0aW5nIGRpc2NpcGxpbmUgZm9yIHRoZSAyMXN0IGNlbnR1cnkuIEluIHRoaXMgbWFqb3IsIHN0dWRlbnRzIHdpbGwgbGVhcm4gYWJvdXQgdW5pdmVyc2FsIHByaW5jaXBsZXMgYW5kIG5ldyBhZHZhbmNlcyBpbiBnZW5ldGljcyBhbmQgZ2Vub21pY3MsIGFuZCBob3cgdGhlc2UgY2FuIGJlIGFwcGxpZWQgdG8gaW1wcm92ZSBoZWFsdGggb3V0Y29tZXMuIEFyZWFzIG9mIHN0dWR5IHdpbGwgaW5jbHVkZSBtb2xlY3VsYXIgYmlvbG9neSwgaHVtYW4gZ2VuZXRpYyBkaXNlYXNlLCBiaW9pbmZvcm1hdGljcyBhbmQgZ2VuZXRpYyBlbmdpbmVlcmluZy4gU3R1ZGVudHMgd2lsbCBhbHNvIGJlIGludHJvZHVjZWQgdG8gY3V0dGluZy1lZGdlIHRlY2hub2xvZ3kgZm9yIG1vbGVjdWxhciBhbmQgZ2VuZXRpYyBhbmFseXNlcy4gVGhyb3VnaCBhIGNvbWJpbmF0aW9uIG9mIHRoZW9yZXRpY2FsIGFuZCBwcmFjdGljYWwgbGFib3JhdG9yeSB0cmFpbmluZywgc3R1ZGVudHMgd2lsbCBhY3F1aXJlIGEgdGhvcm91Z2ggdW5kZXJzdGFuZGluZyBvZiBtb2xlY3VsYXIgZ2VuZXRpY3MgYW5kIGFsc28gZGV2ZWxvcCBza2lsbHMgaW4gY3JpdGljYWwgdGhpbmtpbmcgYW5kIHNjaWVudGlmaWMgY29tbXVuaWNhdGlvbi4gVGhpcyBjb3Vyc2Ugd2lsbCBwcmVwYXJlIHN0dWRlbnRzIGZvciBhIGNhcmVlciBvciBmdXJ0aGVyIHN0dWR5IGluIHRoZSBiaW9tZWRpY2FsIHNjaWVuY2VzLiANCjIwMA0KQkNDQjIwMDAsTUVESTIwMTAsQklPTDIwMDEsR0VORTIwMDEsR0VORTMwMDAsR0VORTMwMDIsQklPTDMwMTAsQklPTDMwMTENCg0KU1BVQy1IVU1HTg0KVU5JVA0KQkNDQjIwMDANCkZvdW5kYXRpb25zIG9mIEJpb2NoZW1pc3RyeQ0KVGhpcyB1bml0IGNvdmVycyBib3RoIHRoZW9yZXRpY2FsIGFuZCBwcmFjdGljYWwgYXNwZWN0cyBvZiBiaW9jaGVtaXN0cnkuIFN0cnVjdHVyZSBhbmQgcHJvcGVydGllcyBvZiB3YXRlci4gQ29uY2VwdHMgb2YgcEgsIHBLIGFuZCBidWZmZXJzLiBNb2xlY3VsYXIgc3RydWN0dXJlIGFuZCBjaGVtaWNhbCBib25kcy4gUHJvcGVydGllcywgc3RydWN0dXJlcyBhbmQgZnVuY3Rpb25zIG9mIGFtaW5vIGFjaWRzLCBsaXBpZHMsIGNhcmJvaHlkcmF0ZXMgYW5kIG51Y2xlaWMgYWNpZHMuIFN0cnVjdHVyZSBhbmQgZnVuY3Rpb24gb2YgZ2xvYnVsYXIgYW5kIGZpYnJvdXMgcHJvdGVpbnMuIENvbmNlcHRzIGFuZCBwcm9wZXJ0aWVzIG9mIGVuenltZXMgaW5jbHVkaW5nIGVuenltZSBraW5ldGljcy4gT3ZlcnZpZXcgYW5kIGNvbmNlcHRzIG9mIGJpb2xvZ2ljYWwgdGhlcm1vZHluYW1pY3MsIGVuZXJneSBtZXRhYm9saXNtIGFuZCBtZXRhYm9saWMgcGF0aHdheXMuIEludGVybWVkaWFyeSBtZXRhYm9saXNtIGluY2x1ZGluZyBtZXRhYm9saWMgcGF0aHdheXMgb2YgZ2x5Y29seXNpcywgY2l0cmljIGFjaWQgY3ljbGUsIHBlbnRvc2UgcGhvc3BoYXRlIHBhdGh3YXksIGdsdWNvbmVvZ2VuZXNpcywgYW1pbm8gYWNpZCBtZXRhYm9saXNtLCBmYXR0eSBhY2lkIG1ldGFib2xpc20sIGtldG9uZSBib2R5IG1ldGFib2xpc20sIG94aWRhdGl2ZSBwaG9zcGhvcnlsYXRpb24gYW5kIGVsZWN0cm9uIHRyYW5zcG9ydC4gTW9sZWN1bGFyIHZpc3VhbGlzYXRpb24gb2YgcHJvdGVpbnMuIFByYWN0aWNhbCBza2lsbHMgYW5kIHRlY2huaXF1ZXMuIFVzaW5nIHNjaWVudGlmaWMgaW5zdHJ1bWVudHMgYW5kIGFuYWx5c2luZyBzY2llbnRpZmljIGRhdGEuDQoyNQ0KSW50ZXJuYWwNCkNIRU0xMDAxO0NIRU0xMDA3O0NIRU0xMDAzO0NIRU0xMDAyDQoNCg0KVU5JVA0KTUVESTIwMTANCk1vbGVjdWxhciBDeXRvZ2VuZXRpY3MgYW5kIERpYWdub3N0aWNzDQpTdHVkZW50cyB3aWxsIGxlYXJuIGJhc2ljIGlkZW50aWZpY2F0aW9uIG9mIGFsbCBjaHJvbW9zb21lcyBpbiB0aGUgaHVtYW4gZ2Vub21lLCBsYWJvcmF0b3J5IHRlY2huaXF1ZXMgZm9yIGN1bHR1cmUgYW5kIHByZXBhcmF0aW9uIG9mIGh1bWFuIHRpc3N1ZXMgZm9yIGN5dG9nZW5ldGljIHN0dWRpZXMsIGFuZCBtZXRob2RzIHVzZWQgdG8gaWRlbnRpZnkgYW5kIGFuYWx5c2UgbW9sZWN1bGFyIGFuZCBjeXRvZ2VuZXRpYyBhbHRlcmF0aW9ucy4gSW4gYWRkaXRpb24sIHN0dWRlbnRzIHdpbGwgbGVhcm4gYWJvdXQgbW9sZWN1bGFyIGFuZCBjeXRvZ2VuZXRpYyBtZWNoYW5pc21zIG9mIGRpc2Vhc2UgZXhwcmVzc2lvbiwgYW5kIGhvdyB0aGVzZSByZWxhdGUgdG8gY2xpbmljYWwgcGhlbm90eXBlLiBNb2xlY3VsYXIgYW5kIGN5dG9nZW5ldGljIGNoYW5nZXMgaW4gY2FuY2VyIHdpbGwgYWxzbyBiZSBkaXNjdXNzZWQuDQoyNQ0KSW50ZXJuYWwNCk1FREkxMDAwLEhVTUIxMDAxDQoNCg0KVU5JVA0KQklPTDIwMDENCkludHJvZHVjdGlvbiB0byBCaW9pbmZvcm1hdGljcw0KSW4gdGhpcyB1bml0IHN0dWRlbnRzIHdpbGwgbGVhcm4gdG8gc291cmNlIGFuZCBpbnRlcnByZXQgZ2VuZXRpYyBhbmQgZ2Vub21pYyBkYXRhIHVzaW5nIG9ubGluZSBkYXRhYmFzZXMgYW5kIHNwZWNpYWxpc3Qgc29mdHdhcmUuDQoyNQ0KSW50ZXJuYWwNCkdFTkUyMDAyLEdFTkUxMDAwDQoNCg0KVU5JVA0KR0VORTIwMDENClBvcHVsYXRpb24gR2VuZXRpY3MgYW5kIE1vbGVjdWxhciBFdm9sdXRpb24NClRoaXMgdW5pdCBmb2N1c2VzIG9uIHRoZSBmb2xsb3dpbmcgdG9waWNzOiBhbmFseXNpcyBvZiBldm9sdXRpb25hcnkgcHJvY2Vzc2VzLCBzZWxlY3Rpb24sIG11dGF0aW9uLCBtaWdyYXRpb24gYW5kIG1vbGVjdWxhciBhc3BlY3RzIG9mIGV2b2x1dGlvbi4gR2VuZSBmbG93IGluIHBvcHVsYXRpb25zIGFuZCBpbnRyb2R1Y3RvcnkgcG9wdWxhdGlvbiBnZW5ldGljcy4gQXBwbGljYXRpb25zIG9mIHBvcHVsYXRpb24gYW5kIG1vbGVjdWxhciBnZW5ldGljcyB0byBodW1hbiBpZGVudGlmaWNhdGlvbiBieSBETkEgcHJvZmlsaW5nIGFuZCBkaWFnbm9zaXMgb2Ygc29tZSBpbmhlcml0ZWQgZGlzb3JkZXJzLg0KMjUNCkludGVybmFsDQpHRU5FMjAwMDtHRU5FMTAwMDszMTE0MjA7R0VORTIwMDI7MzE0MDAwDQoNCg0KVU5JVA0KR0VORTMwMDANCkdlbmV0aWMgRW5naW5lZXJpbmcNClN0dWRlbnRzIHdpbGwgYmUgaW50cm9kdWNlZCB0byBib3RoIHRoZW9yZXRpY2FsIGFuZCBwcmFjdGljYWwgYXNwZWN0cyBvZiBtb2xlY3VsYXIgZ2VuZXRpY3Mgd2l0aCBhIGtleSBmb2N1cyBvbiBudWNsZWkgYWNpZCBiYXNlZCB0ZWNobm9sb2dpZXMuIFN0dWRlbnRzIHdpbGwgc3R1ZHkgdGhlIHByaW5jaXBsZXMgYW5kIGFwcGxpY2F0aW9ucyBvZjogZW56eW1lcyBhbmQgY2xvbmluZyB2ZWN0b3JzLCBzb3V0aGVybiBibG90dGluZywgcG9seW1lcmFzZSBjaGFpbiByZWFjdGlvbiAoUENSKSwgZ2VuZXRpYyBsaWJyYXJpZXMsIEROQSBjbG9uZXMgYW5kIHNlcXVlbmNpbmcsIGFuZCB0aGUgdXNlIG9mIHJhZGlvYWN0aXZlIHN1YnN0YW5jZXMuIEluIGFkZGl0aW9uLCBzdHVkZW50cyB3aWxsIHBlcmZvcm0gYSByYW5nZSBvZiBtYXRoZW1hdGljYWwgY2FsY3VsYXRpb25zIHJlbGF0ZWQgdG8gdGhlIG1hbmlwdWxhdGlvbiBhbmQgaW50ZXJwcmV0YXRpb24gb2YgbGFib3JhdG9yeSBkYXRhLg0KMjUNCkludGVybmFsDQpHRU5FMjAwMDtHRU5FMTAwMDszMDI0ODg7MzExNDIwDQoNCg0KVU5JVA0KR0VORTMwMDINCkh1bWFuIEdlbmV0aWMgRGlzZWFzZQ0KSW4gdGhpcyB1bml0IHN0dWRlbnRzIHdpbGwgdW5kZXJzdGFuZCB0aGUgbW9sZWN1bGFyIGJhc2lzIGZvciBIdW1hbiBnZW5ldGljIGRpc2Vhc2VzIGFuZCB0cmFpdHMuIFRoaXMgd2lsbCBpbmNsdWRlIGFuIHVuZGVyc3RhbmRpbmcgb2YgYm90aCBNZW5kZWxpYW4gYW5kIG5vbiBNZW5kZWxpYW4gZ2VuZXRpYyBkaXNlYXNlcywgY29tcGxleCBkaXNlYXNlcywgZGlzZWFzZXMgY2F1c2VkIGJ5IGVwaWdlbmV0aWMgY2hhbmdlcywgcmlzayBhbmQgZW52aXJvbm1lbnRhbCBmYWN0b3JzIGFmZmVjdGluZyBodW1hbiBkaXNlYXNlIHByb2dyZXNzaW9uIGFuZCB0aGUgbWV0aG9kcyBvZiBpbnRlcnByZXRpbmcgdmFyaWFudHMgYXMgYSBrZXkgbWVtYmVyIG9mIGEgbXVsdGlkaXNjaXBsaW5hcnkgdGVhbS4NCjI1DQpGdWxseSBPbmxpbmUNCkdFTkUxMDAwDQoNCg0KVU5JVA0KQklPTDMwMTENClByb3RlaW4gU3RydWN0dXJlIGFuZCBJbnRlcmFjdGlvbnMNClRoaXMgdW5pdCBlbXBoYXNpc2VzIHByb3RlaW4gc3RydWN0dXJlLCBkeW5hbWljcyBhbmQgaW50ZXJhY3Rpb25zLiBUaGlzIHVuaXQgZXhwbG9yZXMgdG9waWNzIHN1Y2ggYXMgYmlvbW9sZWN1bGFyIGludGVyYWN0aW9ucywgaGllcmFyY2h5IG9mIHByb3RlaW4gc3RydWN0dXJlcywgZXhwZXJpbWVudGFsIGFuZCB0aGVvcmV0aWNhbCBtZXRob2RzIHRvIHN0dWR5IHByb3RlaW4gc3RydWN0dXJlIGFuZCBpbnRlcmFjdGlvbnMsIG1vbGVjdWxhciBtb2RlbGxpbmcgb2YgcHJvdGVpbiBzdHJ1Y3R1cmUgYW5kIGludGVyYWN0aW9ucyAsIHByb3RlaW4gZm9sZGluZywgdmlzdWFsaXNhdGlvbiBvZiBwcm90ZWluIHN0cnVjdHVyZS4gVGhpcyBlbXBoYXNpcyBvbiBwcm90ZWluIHN0cnVjdHVyZSBhbmQgaW50ZXJhY3Rpb25zIHJlZmxlY3RzIHRoZSBjcnVjaWFsIGltcG9ydGFuY2Ugb2YgcHJvdGVpbnMgdG8gbGlmZS4NCjI1DQpJbnRlcm5hbA0KQkNDQjIwMDAsQklPTDIwMDENCg0KDQpNQUpPUg0KTUpSVS1QSENPTA0KUGhhcm1hY29sb2d5DQpQaGFybWFjb2xvZ3kgZXhwbG9yZXMgdGhlIGVmZmVjdHMgb2YgZHJ1Z3Mgb24gbGl2aW5nIG9yZ2FuaXNtcy4gQW4gaW4tZGVwdGggdW5kZXJzdGFuZGluZyBvZiBwaGFybWFjb2xvZ2ljYWwgcHJpbmNpcGxlcyBpcyBlc3NlbnRpYWwgdG8gdGhlIHNhZmUgYW5kIGVmZmVjdGl2ZSBhcHBsaWNhdGlvbiBvZiBtZWRpY2luZXMgYWltZWQgdG8gcHJldmVudCBvciB0cmVhdCBkaXNlYXNlLiBJdCBpcyB0aGUgY29ybmVyc3RvbmUgZm9yIGEgY2FyZWVyIGluIGRydWcgZGlzY292ZXJ5IGFuZCBkZXZlbG9wbWVudCwgYW5kIGlzIGhpZ2hseSBjb21wbGVtZW50YXJ5IHRvIHRob3NlIHBsYW5uaW5nIG9uIGEgY2FyZWVyIGluIGJpb21lZGljYWwgc2NpZW5jZXMuIEluIHRoaXMgbWFqb3IsIHN0dWRlbnRzIHdpbGwgbGVhcm4gaG93IGRydWdzIHRhcmdldCBzcGVjaWZpYyByZWNlcHRvcnMgaW4gdGlzc3VlcyBhbmQgZXhwbG9yZSB0aGUgbWFqb3IgYmlvY2hlbWljYWwgcGF0aHdheXMgdGhhdCBhcmUgYWN0aXZhdGVkLiBPdGhlciB0b3BpY3MgaW5jbHVkZSBkb3NlLXJlc3BvbnNlIHJlbGF0aW9uc2hpcCwgdG94aWNpdHksIGRydWcgbWV0YWJvbGlzbSBhbmQgZWxpbWluYXRpb24sIGRydWcgZGVzaWduIGFuZCBkZXZlbG9wbWVudCwgYW5kIGhvdyBnZW5ldGljIHZhcmlhdGlvbiBiZXR3ZWVuIHBvcHVsYXRpb25zIGluZmx1ZW5jZXMgZHJ1ZyByZXNwb25zZS4gV2l0aCB0aGUgaW5jcmVhc2VkIGdsb2JhbCBjaGFsbGVuZ2UgdG8gZGV2ZWxvcCBuZXcgZHJ1Z3MgYWdhaW5zdCBpbmZlY3Rpb3VzIGFnZW50cywgYW4gZW1waGFzaXMgaXMgcGxhY2VkIG9uIHRoZSB1bmRlcnN0YW5kaW5nIG9mIGRydWcgYWN0aW9uIGFnYWluc3QgbWljcm9vcmdhbmlzbXMuIFRoZW9yZXRpY2FsIGtub3dsZWRnZSBpcyB1bmRlcnBpbm5lZCB0aHJvdWdoIGNvbXB1dGVyLWJhc2VkIHNpbXVsYXRpb25zIGFuZCBoYW5kcy1vbiBsYWJvcmF0b3JpZXMgY292ZXJpbmcgbW9sZWN1bGFyLCBjZWxsdWxhciBhbmQgcGh5c2lvbG9naWNhbCByZXNwb25zZXMsIGFuZCBtb2Rlcm4gZHJ1ZyBhbmFseXNpcyB0ZWNobmlxdWVzLiANCjIwMA0KQkNDQjIwMDAsUEhSTTIwMDUsQ0hFTTEwMDYsUEhSTTIwMDYsSU1FRDMwMDksSU1FRDMwMTAsSU1FRDMwMDgsUEhSTTMwMDUNCg0KU1BVQy1QSENPTA0KVU5JVA0KUEhSTTIwMDUNCkZvdW5kYXRpb25zIGluIFBoYXJtYWNvbG9neQ0KVGhpcyB1bml0IGlzIGRlbGl2ZXJlZCBpbiA1IG1vZHVsZXMgZGVzaWduZWQgdG8gaW50cm9kdWNlIHN0dWRlbnRzIHRvIHRoZSBkaXNjaXBsaW5lIG9mIHBoYXJtYWNvbG9neSBhbmQgdGhlIHBoYXJtYWNldXRpY2FsIGluZHVzdHJ5IGFuZCBwcm92aWRlcyB1bmRlcnN0YW5kaW5nIGFib3V0IHBhdGhvZ2VuaWMgbWljcm9vcmdhbmlzbXMsIHRoZSBkaXNlYXNlcyB0aGV5IGNhdXNlIGFuZCByZXNwb25zZXMgb2YgdGhlIGh1bWFuIGltbXVuZSBzeXN0ZW0uIFRocm91Z2ggdGhlIG1vZHVsZXMgdGhlIGRydWcgZGlzY292ZXJ5IHByb2Nlc3MgaXMgZXhwbG9yZWQsIGhpZ2hsaWdodGluZyB0aGUga2V5IHJvbGUgdGhlIHBoYXJtYWNldXRpY2FsIGluZHVzdHJ5IHBsYXlzIGluIHRoaXMgcHJvY2VzcyBpbmNsdWRpbmcgcHJvbWluZW50IGdsb2JhbCBldGhpY2FsIGlzc3Vlcy4gS2V5IGltbXVub2xvZ2ljYWwgbWVjaGFuaXNtcyB0aGF0IHN0b3AgbWljcm9iaWFsIGludmFzaW9uIGFuZCByZW1vdmFsIGFyZSBwcmVzZW50ZWQgd2l0aGluIHRoZSBjb250ZXh0IG9mIG1pY3JvYmlhbCBwYXRob2dlbmVzaXMgYW5kIHN1cnZpdmFsIHN0cmF0ZWdpZXMuIEZpbmFsbHksIGRpc2Vhc2VzIG9mIGxvY2FsIGFuZCBnbG9iYWwgaW1wb3J0YW5jZSBhcmUgZGlzY3Vzc2VkIGFsb25nIHdpdGggdGhlIHBhdGhvZ2VucyB0aGF0IGNhdXNlIHRoZW0uDQoyNQ0KSW50ZXJuYWwNCk1FREkxMDAwDQoNCg0KVU5JVA0KQ0hFTTEwMDYNClBoYXJtYWNldXRpY2FsIENoZW1pc3RyeQ0KVGhpcyB1bml0IHByb3ZpZGVzIGFuIGludHJvZHVjdGlvbiB0byBjb3JlIGNvbmNlcHRzIHdpdGhpbiBwaGFybWFjZXV0aWNhbCBjaGVtaXN0cnkuIFN0dWRlbnRzIHdpbGwgYmUgaW50cm9kdWNlZCB0byB0aGUgcHJpbmNpcGFsIGxhYm9yYXRvcnkgdGVjaG5pcXVlcyB1c2VkIGZvciBkcnVnIGFuYWx5c2lzIGFuZCBsZWFybiBhYm91dCBhIHJhbmdlIG9mIHBoeXNpby1jaGVtaWNhbCBkcnVnIHByb3BlcnRpZXMgd2hpY2ggaW5mbHVlbmNlIHRoZWlyIHBoYXJtYWNldXRpY2FsIGZvcm11bGF0aW9uLCBwaGFybWFjb2xvZ3kgYW5kIGNsaW5pY2FsIHVzZS4gIFRoaXMgdW5pdCBpcyBkaXZpZGVkIGludG8gdHdvIGxlYXJuaW5nIG1vZHVsZXMuIE1vZHVsZSAxOiBUaXRyaW1ldHJpYyBhbmFseXNpcyBvZiBkcnVncywgc3BlY3Ryb3Bob3RvbWV0cmljIGFuYWx5c2lzIG9mIGRydWdzLCBjaHJvbWF0b2dyYXBoaWMgYW5hbHlzaXMgb2YgZHJ1Z3MsIGFuYWx5c2lzIG9mIGRydWcgZm9ybXVsYXRpb25zLiBNb2R1bGUgMjogS2V5IGZ1bmN0aW9uYWwgZ3JvdXBzIGluIGRydWdzLCBkcnVnIGlvbmlzYXRpb24sIGRydWcgc29sdWJpbGl0eSwgZHJ1ZyBzdGVyZW9jaGVtaXN0cnksIGRydWcgc3RhYmlsaXR5Lg0KMjUNCkludGVybmFsDQpCQ0NCMjAwMA0KDQoNClVOSVQNClBIUk0yMDA2DQpQaGFybWFjb2xvZ3kgUHJpbmNpcGxlcw0KVGhpcyB1bml0IG9mIGxlYXJuaW5nIGludHJvZHVjZXMgc3R1ZGVudHMgdG8gZXNzZW50aWFsIHByaW5jaXBsZXMgYW5kIGNvbmNlcHRzIGluIHRoZSBkaXNjaXBsaW5lIG9mIHBoYXJtYWNvbG9neTsgdGhlIGZpZWxkIG9mIGlucXVpcnkgZGVhbGluZyB3aXRoIHRoZSBhY3Rpb24gb2YgZHJ1Z3Mgb24gdGhlIGh1bWFuIGJvZHkuIFRvcGljcyB0aGF0IGFyZSBjb3ZlcmVkIGZvY3VzIG9uIGRydWcgYWN0aW9uIGFuZCBob3cgdGhlIGJvZHkgbWV0YWJvbGlzZXMgYW5kIGV4Y3JldGVzIHRoZW06IG1vbGVjdWxhciBtZWNoYW5pc21zIG9mIGRydWcgYWN0aW9uIG9uIGNlbGx1bGFyIGNvbXBvbmVudHMsIGFsc28gY2FsbGVkIHBoYXJtYWNvZHluYW1pY3M7IHByaW5jaXBsZXMsIGFwcGxpY2F0aW9ucyBhbmQgY2FsY3VsYXRpb24gc2tpbGxzIG9mIGRydWcgYWJzb3JwdGlvbiwgZGlzdHJpYnV0aW9uIGFuZCBlbGltaW5hdGlvbiwgY29sbGVjdGl2ZWx5IGNhbGxlZCBwaGFybWFjb2tpbmV0aWNzOyBkcnVnIHRveGljaXR5IGFuZCBhbiBpbnRyb2R1Y3Rpb24gdG8gcGhhcm1hY29nZW5vbWljcy4gVGhpcyBmb3JtYXRpdmUgbWF0ZXJpYWwsIHdoaWxlIGludHJvZHVjaW5nIHN0dWRlbnRzIHRvIHRoZSBzY2llbmNlIG9mIGRydWdzIGFuZCBtZWRpY2luZXMsIGVtcGhhc2lzZXMgY29tbW9uIG1lY2hhbmlzbXMsIHByb2Nlc3NlcyBhbmQgY29uY2VwdHMgcmF0aGVyIHRoYW4gZGVzY3JpYmluZyB0aGUgY29tcGxleCBwcm9wZXJ0aWVzIG9mIGRydWdzIHVzZWQgYW5kIGFidXNlZCBpbiB0b2RheSdzIHNvY2lldHkuDQoyNQ0KSW50ZXJuYWwNClBIUk0yMDA1DQoNCg0KVU5JVA0KSU1FRDMwMDkNClBoYXJtYWNvbG9neSBvZiBBbnRpbWljcm9iaWFsIEFnZW50cw0KVGhpcyB1bml0IGNvbW11bmljYXRlcyB0aGUgcHJpbmNpcGxlcyBvZiBhbnRpbWljcm9iaWFsIGFjdGlvbiBhbmQgdHJlYXRtZW50LCBpdHMgcGxhY2UgaW4gbWVkaWNpbmUsIHdpdGggY29uc2lkZXJhdGlvbnMgcmVsZXZhbnQgdG8gZWZmZWN0aXZlIGFudGltaWNyb2JpYWwgYWdlbnQgdXNlIGFuZCBtZWNoYW5pc21zIG9mIGFudGltaWNyb2JpYWwgcmVzaXN0YW5jZS4gU3R1ZGVudHMgaW52ZXN0aWdhdGUgbWVjaGFuaXNtcyBvZiBhY3Rpb24sIHNwZWN0cnVtLCBwaGFybWFjb2tpbmV0aWNzLCBhZHZlcnNlIHJlYWN0aW9ucyBhbmQgZHJ1ZyBpbnRlcmFjdGlvbnMgb2YgYW50aW1pY3JvYmlhbCBhZ2VudHMuIFRoZSB1bml0IGludHJvZHVjZXMgc3R1ZGVudHMgdG8gdGhlIHNjb3BlIG9mIGFudGltaWNyb2JpYWwgY2hlbW90aGVyYXB5IGFuZCBjb25zaWRlcnMgYW50aW1pY3JvYmlhbCB0cmVhdG1lbnQgdG8gYSByYW5nZSBvZiBsb2NhbCBhbmQgZ2xvYmFsbHkgcmVsZXZhbnQgaW5mZWN0aW9ucy4gQ29yZSB1bml0IGNvbmNlcHRzIGluY2x1ZGUgY2xhc3NpZmljYXRpb24gb2YgYW50aWJpb3RpY3MsIHRoZWlyIGRydWcgYWN0aW9uIGFuZCBwcmluY2lwbGVzIG9mIHNlbGVjdGl2ZSB0b3hpY2l0eS4NCjI1DQpGdWxseSBPbmxpbmUNClBIUk0yMDA1LE1FREkyMDA5O1BIUk0yMDA1LE1JQ0IyMDAxO01FREkyMDAwLE1FREkyMDA5O01FREkyMDAwLE1JQ0IyMDAxDQoNCg0KVU5JVA0KSU1FRDMwMTANClN5c3RlbXMgUGhhcm1hY29sb2d5DQpJbiB0aGlzIHVuaXQgc3R1ZGVudHMgd2lsbCBjb21wYXJlIGFuZCBjb250cmFzdCB0aGUgcGhhcm1hY29sb2d5IG9mIGRydWdzIGFjdGluZyBvbiB0aGUgZW5kb2NyaW5lLCByZXNwaXJhdG9yeSwgbXVzY3Vsb3NrZWxldGFsIGFuZCBnYXN0cm9pbnRlc3RpbmFsIHN5c3RlbXMuIFN0dWRlbnRzIHdpbGwgaW52ZXN0aWdhdGUgZHJ1Z3MgZm9yIHBhaW4gYW5kIGFsbGVyZ3k7IGxvY2FsIGhvcm1vbmVzIHRoYXQgYXJlIG1lZGlhdG9ycyBvZiBpbmZsYW1tYXRpb24gYW5kIGFsbGVyZ3k7IGRydWdzIGFmZmVjdGluZyBibG9vZCBnbHVjb3NlLCB0aHlyb2lkIGZ1bmN0aW9uIGFuZCBib25lIG1ldGFib2xpc20uIE1lY2hhbmlzbXMgb2YgZHJ1ZyBhY3Rpb24sIGFkdmVyc2UgZWZmZWN0cywgZHJ1ZyBpbnRlcmFjdGlvbnMgYW5kIGdlbmVyYWwgQURNRSAoYWJzb3JwdGlvbiwgZGlzdHJpYnV0aW9uLCBtZXRhYm9saXNtIGFuZCBleGNyZXRpb24pIHByb3BlcnRpZXMgd2lsbCBiZSBleGFtaW5lZC4NCjI1DQpGdWxseSBPbmxpbmUNClBIUk0yMDA2DQoNCg0KVU5JVA0KSU1FRDMwMDgNCkFkdmFuY2VkIFBoYXJtYWNvbG9neQ0KSW4gdGhpcyB1bml0IHN0dWRlbnRzIHdpbGwgY29tcGFyZSBhbmQgY29udHJhc3QgdGhlIHBoYXJtYWNvbG9neSBvZiBkcnVncyBhY3Rpbmcgb24gdGhlIGF1dG9ub21pYyBuZXJ2b3VzIHN5c3RlbSAoQU5TKSwgY2FyZGlvdmFzY3VsYXIsIHJlbmFsLCBhbmQgY2VudHJhbCBuZXJ2b3VzIHN5c3RlbSAoQ05TKS4gVGhpcyB1bml0IG9mIGxlYXJuaW5nIHdpbGwgaW52ZXN0aWdhdGUgZHJ1Z3MgYWZmZWN0aW5nIGxpcG9wcm90ZWluIG1ldGFib2xpc20sIGRpdXJldGljcywgdmFzb2RpbGF0b3JzLCBjYWxjaXVtIGNoYW5uZWwgYmxvY2tlcnMgYW5kIGFudGl0aHJvbWJvdGljcywgaW5jbHVkaW5nIGRydWdzIGFmZmVjdGluZyBoZWFydCByaHl0aG0uIFBzeWNob3N0aW11bGFudHMgYW5kIGRydWdzIG9mIGFidXNlIGFyZSBhbHNvIGRpc2N1c3NlZCwgaW5jbHVkaW5nIGRydWdzIGZvciBQYXJraW5zb27igJlzIGFuZCBvdGhlciBuZXVyb2RlZ2VuZXJhdGl2ZSBkaXNvcmRlcnMsIGVwaWxlcHN5LCBhbmQgZHJ1Z3MgdXNlZCB0byB0cmVhdCBiZWhhdmlvdXJhbCBkaXNvcmRlcnMuIFRoZSB1bml0IGluY2x1ZGVzIGRpc2N1c3Npb25zIG9uIHRoZSBjaGxvcmlkZSBpb24tR0FCQSByZWNlcHRvciBjb21wbGV4LCBiZW56b2RpYXplcGluZSByZWNlcHRvciBhZ29uaXN0cyBhbmQgYW50YWdvbmlzdHMuIENhbmNlciBwcm9ncmVzc2lvbiB3aWxsIGJlIGludmVzdGlnYXRlZCB3aXRoIHRoZSBhbnRpbmVvcGxhc3RpYyBkcnVncyBjdXJyZW50bHkgdXNlZCB0byB0cmVhdCBjYW5jZXJzIGluIG11bHRpcGxlIG9yZ2FuIHN5c3RlbXMuIEFic29ycHRpb24sIGRpc3RyaWJ1dGlvbiwgbWV0YWJvbGlzbSBhbmQgZXhjcmV0aW9uIChBRE1FKSwgbWVjaGFuaXNtcyBvZiBhY3Rpb24sIGFkdmVyc2UgZWZmZWN0cyBhbmQgZGV0YWlsZWQgZHJ1ZyBpbnRlcmFjdGlvbiBwb3RlbnRpYWwgaW5jbHVkaW5nIGRydWdzIGNvdmVyZWQgaW4gYWxsIHByZXZpb3VzIHBoYXJtYWNvbG9neSB1bml0cyB3aWxsIGJlIGV4YW1pbmVkLg0KMjUNCkludGVybmFsDQpJTUVEMzAxMA0KDQoNClVOSVQNClBIUk0zMDA1DQpBZHZhbmNlZCBQaGFybWFjb2tpbmV0aWNzIGFuZCBEcnVnIEJpb2FuYWx5c2lzDQpJbiB0aGlzIHVuaXQgc3R1ZGVudHMgd2lsbCBidWlsZCB1cG9uIHByaW9yIGNvdXJzZSBjb250ZW50IGJhc2VkIHVwb24gcGhhcm1hY29raW5ldGljcyAoUEspIGFuZCBkcnVnIGFuYWx5c2lzLiBUaGlzIHVuaXQgY29tcHJpc2VzIG9mIHR3byBsZWFybmluZyBtb2R1bGVzOiBNb2R1bGUgMSAoYWR2YW5jZWQgUEspIC0gZHJ1ZyBjbGVhcmFuY2UsIGRydWcgbWV0YWJvbGlzbSwgUEsgaW4gcmVuYWwgYW5kIGhlcGF0aWMgZGlzZWFzZSwgbm9ubGluZWFyIFBLLCBwaGFybWFjb2dlbmV0aWNzLCBwaGFybWFjb2R5bmFtaWNzLCBwcmVkaWN0aW9uIG9mIGh1bWFuIGtpbmV0aWNzLCBiaW9lcXVpdmFsZW5jZSwgY2xpbmljYWwgUEsgcmVzZWFyY2ggcHJpbmNpcGxlczsgTW9kdWxlIDIgKGRydWcgYmlvYW5hbHlzaXMpIC0gZnVuZGFtZW50YWxzIG9mIGRydWcgYmlvYW5hbHlzaXMsIGhpZ2ggcHJlc3N1cmUgbGlxdWlkIGNocm9tYXRvZ3JhcGh5IGZvciBkcnVnIGJpb2FuYWx5c2lzLCBoaWdoIHByZXNzdXJlIGNhcGlsbGFyeSBlbGVjdHJvcGhvcmVzaXMsIGltbXVub2Fzc2F5cywgdHJhY2VyIHRlY2huaXF1ZXMgYW5kIGxhYmVsbGVkIGRydWcgc3R1ZGllcywgZmx1b3JpbWV0cnkgYW5kIG1hc3Mgc3BlY3Ryb21ldHJ5Lg0KMjUNCkludGVybmFsDQpDSEVNMTAwNixQSFJNMjAwNg0KDQoNClNQRUNJQUxJWkFUSU9ODQpTUFVDLUhVTVBUDQpIdW1hbiBQYXRob2xvZ3kNClRoaXMgc3BlY2lhbGlzYXRpb24gd2lsbCBhbGxvdyBzdHVkZW50cyB0byBwdXJzdWUgdGhlaXIgaW50ZXJlc3QgaW4gYmlvbG9neSBvZiBodW1hbiBoZWFsdGggYW5kIGRpc2Vhc2UgYW5kIG1vcmUgYnJvYWRseSBwcmVwYXJlcyB0aGVtIGZvciBhIGNhcmVlciBpbiBjbGluaWNhbCBoZWFsdGggc2VydmljZXMuIFRoaXMgc3BlY2lhbGlzYXRpb24gY29uc2lzdHMgb2YgZm91ciBwYXRob2xvZ3kgYW5kIHBoeXNpb2xvZ3kgdW5pdHMgc3VjaCBhcyBIaXN0b3BhdGhvbG9neSwgSW1tdW5vYmlvbG9neSwgQ2xpbmljYWwgUGF0aG9waHlzaW9sb2d5IGFuZCBOZXVyb3BoeXNpb2xvZ3ksIA0KMTAwDQpUUlVFDQpQQVRIMjAwMCxNRURJMjAwMCxNRURJMzAxNyxIVU1CMzAwOA0KDQoNCk1KUlUtTU9MR04sTUpSVS1QSENPTA0KVU5JVA0KUEFUSDIwMDANCkZvdW5kYXRpb25zIG9mIEhpc3RvcGF0aG9sb2d5DQpUaGlzIHVuaXQgY292ZXJzIHRoZSBoaXN0b2xvZ3kgb2YgdGhlIGZvbGxvd2luZyBzeXN0ZW1zOyBpbnRlZ3VtZW50LCBtdXNjdWxvc2tlbGV0YWwsIGNhcmRpb3Zhc2N1bGFyLCByZXNwaXJhdG9yeSwgZGlnZXN0aXZlLCBuZXJ2b3VzIGFuZCB1cm9nZW5pdGFsLiBTZWN0aW9uIGN1dHRpbmcsIHN0YWluaW5nIGFuZCBtaWNyb3Njb3BpYyBpbnRlcnByZXRhdGlvbiBvZiBzZWxlY3RlZCB0aXNzdWVzIGFuZCBvcmdhbnMgZnJvbSB0aGVzZSBzeXN0ZW1zIHdpbGwgYmUgdW5kZXJ0YWtlbi4gU3R1ZGVudHMgd2lsbCBzdHVkeSB0aGUgcHJpbmNpcGxlcyBhbmQgYXBwbGljYXRpb25zIG9mIHJvdXRpbmUgYW5kIHNvbWUgc3BlY2lhbCBoaXN0b2xvZ2ljYWwgbWV0aG9kcyBmb3Igc3RhaW5pbmcgY29ubmVjdGl2ZSB0aXNzdWUsIG11c2NsZSwgY2FyYm9oeWRyYXRlcywgbWljcm8tb3JnYW5pc21zIGFuZCBuZXVyYWwgdGlzc3VlLg0KMjUNCkludGVybmFsDQoxNjQ0LDMxMzQwMDsxNjQ0LDc4NDI7MTY0NCxNRURJMTAwMDszMTMzOTksMzEzNDAwOzMxMzM5OSw3ODQyOzMxMzM5OSxNRURJMTAwMDtIVU1CMTAwMSwzMTM0MDA7SFVNQjEwMDEsNzg0MjtIVU1CMTAwMSxNRURJMTAwMA0KDQoNClVOSVQNCk1FREkyMDAwDQpGb3VuZGF0aW9ucyBvZiBJbW11bm9iaW9sb2d5DQpTdHJ1Y3R1cmUgYW5kIGZ1bmN0aW9ucyBvZiB0aGUgaW1tdW5lIHN5c3RlbSwgaW1tdW5lIHJlc3BvbnNlcywgbHltcGhvY3l0ZSBwaHlzaW9sb2d5IGFuZCB0aGVpciBjZWxsIG1lbWJyYW5lIGFudGlnZW4gc3lzdGVtcywgaW1tdW5nb25lbnMgYW5kIGNoYXJhY3RlcmlzdGljczsgYW50aWJvZHkgc3RydWN0dXJlIGFuZCBmdW5jdGlvbiwgYW50aWJvZHkgc3RydWN0dXJlIGFuZCBmdW5jdGlvbjsgcHJpbmNpcGxlcyBhbmQgYXBwbGljYXRpb25zIG9mIG1vbm9jbG9uYWwgYW50aWJvZHkgdGVjaG5vbG9neSwgQW50aWdlbi1hbnRpYm9keSByZWFjdGlvbnMgYW5kIGltbXVub2Fzc2F5cywgVGhlIE1IQyBDb21wbGV4IGFuZCBpdHMgcm9sZSwgQ3l0b2tpbmVzIGluIGhlYWx0aCBhbmQgZGlzZWFzZSwgdGhlIGNvbXBsZW1lbnQgc3lzdGVtLCBpbW11bm9wYXRob2xvZ3kgLSBoeXBlcnNlbnNpdGl2aXRpZXMsIGltbXVub2xvZ2ljYWwgdG9sZXJhbmNlIGFuZCBhdXRvaW1tdW5lIGRpc2Vhc2VzLCBpbW11bm9kZWZpY2llbmNpZXMsIHR1bW9yIGltbXVub2xvZ3kgaW5jbHVkaW5nIG5lb3BsYXNpYXMgb2YgdGhlIGx5bXBob2lkIHN5c3RlbSwgc3lzdGVtaWMgYW5kIG11Y29zYWwgaW1tdW5pdHkgdG8gYmFjdGVyaWFsLCB2aXJhbCBhbmQgcGFyYXNpdGljIGluZmVjdGlvdXMgZGlzZWFzZXMsIGFuZCBjYXJjaW5vbWFzLg0KMjUNCkludGVybmFsDQpNRURJMTAwMCxIVU1CMTAwMTtNRURJMTAwMCwzMTMzOTk7TUVESTEwMDAsMTY0NDs3ODQyLEhVTUIxMDAxOzc4NDIsMzEzMzk5Ozc4NDIsMTY0NDszMTM0MDAsSFVNQjEwMDE7MzEzNDAwLDMxMzM5OTszMTM0MDAsMTY0NA0KDQoNClVOSVQNCk1FREkzMDE3DQpNZWRpY2FsIFBhdGhvcGh5c2lvbG9neQ0KUHJpbmNpcGxlcyBvZiBkaXNlYXNlIHByb2Nlc3NlcywgY2F1c2VzLCBtZWRpY2FsIHByb2NlZHVyZXMsIGNlbGwgaW5qdXJ5LCBpbmZsYW1tYXRpb24gYW5kIHRpc3N1ZSByZXBhaXIsIGFibm9ybWFsIGdyb3d0aCBwYXR0ZXJucy4gSW50ZXJuYXRpb25hbCBzeXN0ZW1zIGZvciBjbGFzc2lmaWNhdGlvbiBhbmQgY29kaW5nIG9mIGRpc2Vhc2VzLiBEaXNlYXNlcyBvZiB0aGUgbXVzY3VsYXIsIGVuZG9jcmluZSwgY2FyZGlvdmFzY3VsYXIsIHB1bG1vbmFyeSwgZGlnZXN0aXZlIGFuZCBuZXJ2b3VzIHN5c3RlbXMuIENvcnJlbGF0aW9uIGJldHdlZW4gbWVjaGFuaXNtcyBvZiBkaXNlYXNlIGFuZCBjbGluaWNhbCBhc3BlY3RzIChkaXNlYXNlIHBoZW5vdHlwZSwgc2lnbnMgYW5kIHN5bXB0b21zKS4NCjI1DQpJbnRlcm5hbA0KSFVNQjIwMDMsSFVNQjIwMTQ7SFVNQjIwMDMsSFVNQjIwMDQ7SFVNQjIwMTIsSFVNQjIwMTQ7SFVNQjIwMTIsSFVNQjIwMDQNCg0KDQpVTklUDQpIVU1CMzAwOA0KQ2xpbmljYWwgTmV1cm9waHlzaW9sb2d5DQpUbyBvYnRhaW4gYW5kIGludGVycHJldCBzaWduYWxzIGdlbmVyYXRlZCBieSB0aGUgYm9keSwgZm9yIHRoZSBwdXJwb3NlIG9mIGFzc2Vzc2luZyBmdW5jdGlvbiwgY2xpbmljYWwgbmV1cm9waHlzaW9sb2dpc3RzIG11c3QgaGF2ZSBhIGNsZWFyIHVuZGVyc3RhbmRpbmcgb2YgdGhlIHRlY2hub2xvZ3kgYW5kIG1ldGhvZHMgdXNlZCB0byByZWNvcmQgYW5kIGFuYWx5emUgc2lnbmFscywgYW5kIHVuZGVyc3RhbmQgdGhlIGJpb2xvZ2ljYWwgYWN0aXZpdHkgdW5kZXJseWluZyB0aGVzZSBzaWduYWxzLiBUaGlzIHVuaXQgaW50ZWdyYXRlcyB0aGUgY29yZSBhbmF0b21pY2FsIGFuZCBwaHlzaW9sb2dpY2FsIGtub3dsZWRnZSByZXF1aXJlZCBmb3IgdGhlIHByYWN0aWNlIG9mIGNsaW5pY2FsIG5ldXJvcGh5c2lvbG9neSwgZXhhbWluaW5nIHRoZSBiaW9sb2d5IHVuZGVybHlpbmcgc2lnbmFscyBnZW5lcmF0ZWQgYnkgdGhlIGJvZHkuIE1vcmVvdmVyLCB0aGlzIHVuaXQgaW50cm9kdWNlcyB0aGUgdGVjaG5vbG9neSBhbmQgdGVjaG5pcXVlcyBmb3IgbWVhc3VyaW5nIGFuZCBhbmFseXppbmcgYmlvbG9naWNhbCBzaWduYWxzLCBhbmQgaW50cm9kdWNlcyB0aGUgcm9sZSBvZiBjbGluaWNhbCBuZXVyb3BoeXNpb2xvZ3kgaW4gZGlhZ25vc2lzLg0KMjUNCkludGVybmFsDQpIVU1CMjAxNCxIVU1CMjAwMDtIVU1CMjAxNCxIVU1CMzAwOTtIVU1CMjAwNCxIVU1CMjAwMDtIVU1CMjAwNCxIVU1CMzAwOQ0KDQoNClNQRUNJQUxJWkFUSU9ODQpTUFVDLUlDQklPDQpJbW11bm9sb2d5IGFuZCBDZWxsIEJpb2xvZ3kNClRoaXMgc3BlY2lhbGlzYXRpb24gd2lsbCBhbGxvdyBzdHVkZW50cyB0byBwdXJzdWUgdGhlaXIgaW50ZXJlc3QgaW4gaW1tdW5vbG9neSBhbmQgY2VsbCBiaW9sb2d5LiBJbiB0aGlzIHNwZWNpYWxpc2F0aW9uLCBzdHVkZW50cyB3aWxsIGV4cGxvcmUgY2VsbCBiaW9sb2d5IGNvbmNlcHRzIHN1Y2ggYXMgbWVtYnJhbmUgdHJhbnNwb3J0LCBwcm90ZWluIHNvcnRpbmcgYW5kIG1hdHVyYXRpb24sIHByb3RlaW4gZGVncmFkYXRpb24sIHZlc2ljbGUgdHJhZmZpY2tpbmcgYW5kIGZ1bmRhbWVudGFsIGNvbmNlcHRzIG9mIGNlbGwgc2lnbmFsbGluZy4gU3R1ZGVudHMgd2lsbCBsZWFybiB0aGUgc3RydWN0dXJlIGFuZCBmdW5jdGlvbnMgb2YgdGhlIGltbXVuZSBzeXN0ZW0sIGFudGlib2R5IHN0cnVjdHVyZSBhbmQgZnVuY3Rpb24sIGF1dG9pbW11bmUgZGlzZWFzZXMsIHZpcmFsIGFuZCBwYXJhc2l0aWMgaW5mZWN0aW91cyBkaXNlYXNlcywgYW5kIGNhcmNpbm9tYXMuIFN0dWRlbnRzIHdpbGwgZXhwbG9yZSBjdXJyZW50IGFkdmFuY2VzIGluIGltbXVub2xvZ3kgYW5kIGNlbGwgYmlvbG9neSBjb25jZXB0cyBhbmQgdGVjaG5pcXVlcy4gDQoxMDANClRSVUUNCkJDQ0IyMDA0LE1FREkyMDAwLE1FREkzMDE2LEJDQ0IzMDAxDQoNCg0KDQpVTklUDQpCQ0NCMjAwNA0KRm91bmRhdGlvbnMgb2YgQ2VsbCBCaW9sb2d5DQpJbiB0aGlzIHVuaXQsIHN0dWRlbnRzIHdpbGwgcmVjZWl2ZSBhIGNvbXByZWhlbnNpdmUgaW50cm9kdWN0aW9uIHRvIGNlbGwgYmlvbG9neSBhbmQgYnVpbGQgdXBvbiBmdW5kYW1lbnRhbCBjb25jZXB0cyBwcmVzZW50ZWQgaW4gZWFybGllciB1bml0cy4gRm91bmRhdGlvbnMgb2YgQ2VsbCBCaW9sb2d5IGZvY3VzZXMgb24gaG93IGNlbGxzIHJlZ3VsYXRlIHRoZWlyIGFjdGl2aXRpZXMgdG8gcmVzcG9uZCB0byB0aGUgZXh0ZXJuYWwgZW52aXJvbm1lbnQuIENvcmUgY29uY2VwdHMgZXhwbG9yZWQgaW4gdGhpcyB1bml0IGluY2x1ZGUgbWVtYnJhbmUgdHJhbnNwb3J0LCBwcm90ZWluIHNvcnRpbmcgYW5kIG1hdHVyYXRpb24sIHByb3RlaW4gZGVncmFkYXRpb24sIHZlc2ljbGUgdHJhZmZpY2tpbmcgYW5kIGZ1bmRhbWVudGFsIGNvbmNlcHRzIG9mIGNlbGwgc2lnbmFsbGluZy4gVGhlIGxhYm9yYXRvcmllcyByZWluZm9yY2UgbGVjdHVyZSBjb25jZXB0cyBhbmQgZW5hYmxlIHN0dWRlbnRzIHRvIGRldmVsb3AgYmlvbG9naWNhbCBsYWJvcmF0b3J5IHNraWxscw0KMjUNCkludGVybmFsDQpHRU5FMTAwMA0KDQoNClVOSVQNCk1FREkzMDE2DQpGcm9udGllcnMgaW4gSW1tdW5vbG9neQ0KSW4gdGhpcyB1bml0IHN0dWRlbnRzIHdpbGwgZXhwbG9yZSBmdW5kYW1lbnRhbCBjb25jZXB0cyBhbmQgY3VycmVudCBhZHZhbmNlcyBpbiBpbW11bm9sb2d5LiBUaGlzIG1heSBpbmNsdWRlIChidXQgbm90IGJlIGxpbWl0ZWQgdG8pIGNhbmNlciBpbW11bm90aGVyYXBldXRpYyBzdHJhdGVnaWVzLCBob3cgYWdlaW5nIGltcGFjdHMgaW1tdW5lIGZ1bmN0aW9uLCBhbmQgdmFjY2luZXMuIFByYWN0aWNhbCB3b3JrIHdpbGwgaW52b2x2ZSBkZXNpZ25pbmcgYW5kIGNvbmR1Y3RpbmcgaW1tdW5vbG9neS1iYXNlZCBhc3NheXMuIFN0dWRlbnRzIHdpbGwgdW5kZXJ0YWtlIGEgZGlyZWN0ZWQgcmVzZWFyY2ggY29tcG9uZW50IGluIG9yZGVyIHRvIGFwcGx5IGZ1bmRhbWVudGFsIGtub3dsZWRnZSB0byDigJxyZWFsLWxpZmUgc2NlbmFyaW9z4oCdLg0KMjUNCkludGVybmFsDQpNRURJMjAwMA0KDQoNClVOSVQNCkJDQ0IzMDAxDQpGcm9udGllcnMgaW4gQ2VsbCBCaW9sb2d5DQpJbiB0aGlzIHVuaXQgc3R1ZGVudHMgd2lsbCBzdHVkeSBhZHZhbmNlZCBjZWxsIGJpb2xvZ3kgY29uY2VwdHMgYW5kIHRlY2huaXF1ZXMsIGJ1aWxkaW5nIG9uIGtub3dsZWRnZSBhY3F1aXJlZCBpbiBGb3VuZGF0aW9ucyBvZiBDZWxsIEJpb2xvZ3kuIEFkdmFuY2VkIHRvcGljcyBjb3ZlcmVkIGluIHRoaXMgdW5pdCBpbmNsdWRlIGRldmVsb3BtZW50YWwgYW5kIHN0ZW0gY2VsbCBiaW9sb2d5LCBjZWxsIGJpb2xvZ3kgb2YgYWdpbmcsIGNlbGwgdGhlcmFwaWVzIGFuZCB0aXNzdWUgZW5naW5lZXJpbmcsIG9yZ2FuZWxsZSBkZXBlbmRlbnQgc2lnbmFsbGluZyBhbmQgZHluYW1pY3MsIHJlZ3VsYXRpb24gb2YgZ2VuZSBleHByZXNzaW9uLCBudXRyaWVudCBhbmQgZW5lcmd5IHJlZ3VsYXRlZCBzaWduYWxsaW5nLCB0aGUgbGlmZSBjeWNsZSBvZiBjZWxscyBhbmQgdGhlIGNlbGwgYmlvbG9neSBvZiBjYW5jZXIgYW5kIGRpc2Vhc2UuDQoyNQ0KSW50ZXJuYWwNCkJDQ0IyMDA0DQoNCg0KU1BFQ0lBTElaQVRJT04NClNQVUMtTUlDUk8NCk1pY3JvYmlvbG9neQ0KVGhpcyBzcGVjaWFsaXNhdGlvbiB3aWxsIGFsbG93IHN0dWRlbnRzIHRvIHB1cnN1ZSB0aGVpciBpbnRlcmVzdCBpbiBtaWNyb2Jpb2xvZ3kuIEZyb20gaW52ZXN0aWdhdGlvbnMgaW4gaW5mZWN0aW91cyBtaWNyb2Jpb2xvZ3kgdG8gYWR2YW5jZXMgaW4gbW9sZWN1bGFyIG1pY3JvYmlvbG9neSwgdGhpcyBzcGVjaWFsaXNhdGlvbiBvZmZlcnMgc3R1ZGVudHMgYW4gaW5zaWdodCBpbnRvIG1pY3JvYmlvbG9naWNhbCBjZWxsIHN0cnVjdHVyZXMgYW5kIGZ1bmN0aW9ucywgYW4gdW5kZXJzdGFuZGluZyBvZiBtaWNyb2JpYWwgZ2VuZSByZWd1bGF0aW9uIGFuZCBudWNsZWljIGFjaWQgcmVwbGljYXRpb24sIHBhdGhvZ2VuZXNpcyBvZiBtYWpvciBtaWNyb2JpYWwgcGF0aG9nZW5zLCB0aGUgaW1wYWN0IG9mIG1pY3JvYmlvbG9neSBvbiBodW1hbiBoZWFsdGgsIGFuZCB0aGUgdXNlIG9mIG1pY3JvYmVzIGluIGFncmljdWx0dXJlLCBtaW5pbmcsIGFuZCBvdGhlciBpbmR1c3RyaWVzLiBJdCBhbHNvIGludHJvZHVjZXMgc3R1ZGVudHMgdG8gdGhlIG1vbGVjdWxhciBiaW9sb2d5IG9mIHZpcnVzZXMsIHRoZSBkZXZlbG9wbWVudCBvZiBhbnRpdmlyYWwgYWdlbnRzIGFuZCB2YWNjaW5lcywgYW5kIHRoZSBlcGlkZW1pb2xvZ3kgb2YgdmlyYWwgZGlzZWFzZS4NCjEwMA0KVFJVRQ0KTUVESTIwMDksTUlDQjIwMDEsTUlDQjMwMDAsTUlDQjMwMDINCg0KDQoNClVOSVQNCk1FREkyMDA5DQpJbnZlc3RpZ2F0aW9ucyBpbiBJbmZlY3Rpb3VzIE1pY3JvYmlvbG9neQ0KVGhpcyB1bml0IHN0dWRpZXMgbWljcm9iaW9sb2dpY2FsIGNlbGwgc3RydWN0dXJlcyBhbmQgZnVuY3Rpb25zLCBhbmQgd29ya3Mgb24gaWRlbnRpZnlpbmcgYW5kIGhpZ2hsaWdodGluZyB0aGUgdmlydWxlbnQgYXNwZWN0cyBvZiBiYWN0ZXJpYSB0byB1bmRlcnN0YW5kIGhvdyB0aGVzZSBmYWN0b3JzIGNhbiBpbmZsdWVuY2UgdGhlIHBhdGhvZ2VuZXNpcyBvZiBpbmZlY3Rpb3VzIGRpc2Vhc2UuIFRoZSBkeW5hbWljIGludGVycmVsYXRpb25zaGlwIGJldHdlZW4gYSBodW1hbiBob3N04oCZcyBkZWZlbnNlIG1lY2hhbmlzbXMgIGFuZCBob3cgdGhlIGltbXVuZSBzeXN0ZW0gZGVhbHMgd2l0aCBwYXRob2dlbnMsIGFuZCBob3cgdGhlIHBhdGhvZ2VucyBkZWFsIHdpdGggdGhlIGhvc3TigJlzIGltbXVuZSBzeXN0ZW0gaXMgZXhhbWluZWQuIFRoZSBkZXZlbG9waW5nIHBhdGhvZ2VuZXNpcyBvZiBhbiBpbmZlY3Rpb3VzIGRpc2Vhc2UgaXMgZXhhbWluZWQgYW5kIHVuZGVyc3Rvb2QgYnkgZXhwbG9yaW5nIGNsaW5pY2FsbHkgcmVsZXZhbnQgY2FzZSBzdHVkaWVzIHVzaW5nIGJhY3RlcmlhIGFuZCB2aXJ1c2VzIGluIGEgbGFib3JhdG9yeSBzZXR0aW5nLiBUaGUgY2xpbmljYWwgZGlhZ25vc3RpYyBjeWNsZSBmb3IgZGVzY3JpYmluZywgY2xhc3NpZnlpbmcgYW5kIGRpYWdub3NpbmcgbWljcm9iaWFsIHBhdGhvZ2VucyBpbmNsdWRlcyB0aGUgY29sbGVjdGlvbiBvZiByZWxldmFudCBodW1hbiBjbGluaWNhbCBzcGVjaW1lbnMsIGxhYm9yYXRvcnkgcHJvY2Vzc2luZyBvZiBjb2xsZWN0ZWQgc3BlY2ltZW5zLCBjdWx0aXZhdGlvbiBhbmQgdGF4b25vbWljIGlkZW50aWZpY2F0aW9uIG9mIHBhdGhvZ2VucyBhbmQgcG9zc2libGUgdHJlYXRtZW50IGF2ZW51ZXMgKGFudGliaW90aWMgc3VzY2VwdGliaWxpdHkgdGVzdGluZykuIFRoaXMgdW5pdCBhbHNvIGNvdmVycyB0aGUgaW1wb3J0YW50IHRvcGljIG9mIGFudGliaW90aWMgdGhlcmFweSBhcyB3ZWxsIGFzIGFuIGludHJvZHVjdGlvbiB0byBlcGlkZW1pb2xvZ3kgY292ZXJpbmcgZGlzZWFzZSBkaXN0cmlidXRpb24sIGNhdXNhbGl0eSwgbW9uaXRvcmluZyBkaXNlYXNlIG9mIG91dGJyZWFrcyBhbmQgdGhlIGNvbnRyb2wgb2YgaW5mZWN0aW91cyBkaXNlYXNlcyB3aXRoaW4gdGhlIGZyYW1ld29yayBvZiBoZWFsdGguDQoyNQ0KSW50ZXJuYWwNCkJDQ0IxMDAwO01FREkxMDAwDQoNCg0KVU5JVA0KTUlDQjIwMDENClRyYW5zbGF0aW9uYWwgTWljcm9iaW9sb2d5DQpNaWNyb2JpYWxseSBwcm9kdWNlZCBjb21wb3VuZHMgaW5jbHVkaW5nIGFudGliaW90aWNzLCBlbnp5bWVzIGFuZCBiaW9mdWVscyBwbGF5IHNpZ25pZmljYW50IHJvbGVzIGluIGdsb2JhbCBoZWFsdGggb3V0Y29tZXMgYW5kIGVjb25vbWljIHByb2dyZXNzaW9uLiBUaGUgcmVsZXZhbmNlIG9mIGJhY3RlcmlhIHRvIG1vbGVjdWxhciBiaW90ZWNobm9sb2d5IGlzIGlsbHVzdHJhdGVkIHdpdGggZXhhbXBsZXMgb2YgbWVkaWNpbmUsIHB1YmxpYyBoZWFsdGgsIGluZHVzdHJpYWwgZmVybWVudGF0aW9ucywgYmlvcHJvc3BlY3RpbmcsIGJpb3JlbWVkaWF0aW9uLCBiaW9wZXN0aWNpZGVzLCBhbmQgYWdyaWN1bHR1cmUgYXBwbGljYXRpb25zLiBUaGUgaW1wYWN0IG9mIG1pY3JvYmlvbG9neSBvbiBodW1hbiBoZWFsdGggd2lsbCBiZSBzdHVkaWVkIGJ5IGV4YW1pbmluZyBpbnRlcmFjdGlvbnMgYmV0d2VlbiBtaWNyb2JpYWwgY29tbXVuaXRpZXMgYW5kIHRoZWlyIGVudmlyb25tZW50LCB3aXRoIGVtcGhhc2lzIG9uIG1pY3JvYmlhbCBkaXZlcnNpdHkgYW5kIHRoZWlyIG1ldGFib2xpYyBhY3Rpdml0aWVzLiBUaGlzIGludGVyZGlzY2lwbGluYXJ5IHVuaXQgd2lsbCBhbGxvdyBzdHVkZW50cyB0byBleHBsb3JlIGFuZCB1dGlsaXplIGdlbmV0aWMgcmVzZWFyY2gsIG1vbGVjdWxhciBiaW9sb2d5LCBjaGVtaXN0cnksIGFuZCBlbnZpcm9ubWVudGFsIG1pY3JvYmlvbG9neSBmb2N1c2luZyBvbiBob3cgdG8gdHVybiBsYWIgYmFzZWQgZGlzY292ZXJpZXMgaW50byB0YW5naWJsZSBzb2x1dGlvbnMgZm9yIHJlYWwgd29ybGQgaXNzdWVzLg0KMjUNCkludGVybmFsDQpNRURJMTAwMA0KDQoNClVOSVQNCk1JQ0IzMDAwDQpNb2xlY3VsYXIgVmlyb2xvZ3kNClRoaXMgdW5pdCBleGFtaW5lcyB0aGUgbW9sZWN1bGFyIGJpb2xvZ3kgb2YgdmlydXNlcywgd2l0aCB0aGUgYWltIG9mIGluY3JlYXNpbmcgc3R1ZGVudCB1bmRlcnN0YW5kaW5nIG9mIGdlbmUgcmVndWxhdGlvbiBhbmQgbnVjbGVpYyBhY2lkIHJlcGxpY2F0aW9uIHRvIGFuIGFkdmFuY2VkIGxldmVsLiBBbmltYWwsIHBsYW50LCBpbnNlY3QgYW5kIGJhY3RlcmlhbCB2aXJ1c2VzIGFyZSBzdHVkaWVkLCBhbG9uZyB3aXRoIHN0cmF0ZWdpZXMgZm9yIHRoZSBkZXZlbG9wbWVudCBvZiBhbnRpdmlyYWwgYWdlbnRzIGFuZCB2YWNjaW5lcywgY2xvbmluZyBhbmQgZXhwcmVzc2lvbiB2ZWN0b3JzLCBiaW9sb2dpY2FsIGNvbnRyb2wgb2YgaW5zZWN0cyBhbmQgcGVzdHMsIHN0cmF0ZWdpZXMgZm9yIHN0dWR5aW5nIG9uY29nZW5lc2lzIGFuZCBjZWxsIGFwb3B0b3NpcyBhbmQgdG9vbHMgZm9yIGRpYWdub3NpbmcgdmlyYWwgaW5mZWN0aW9uIGFuZCBhbmFseXNpbmcgdGhlIGVwaWRlbWlvbG9neSBvZiB2aXJhbCBkaXNlYXNlLg0KMjUNCkludGVybmFsDQpNRURJMjAwMztNRURJMjAwOTszMTE0MDU7MzAyNDY2DQoNCg0KVU5JVA0KTUlDQjMwMDINCkFkdmFuY2VzIGluIE1vbGVjdWxhciBNaWNyb2Jpb2xvZ3kNCkFuIGFkdmFuY2VkIGNvdXJzZSBpbiB0aGUgc3R1ZHkgb2YgbW9sZWN1bGFyIGJpb2xvZ3kgYW5kIHBhdGhvZ2VuZXNpcyBvZiBtYWpvciBiYWN0ZXJpYWwgcGF0aG9nZW5zLiBUaGVyZSBpcyBhbiBlbXBoYXNpcyBvbiBuZXcgYW5kIGVtZXJnaW5nIGluZmVjdGlvbnMgYXMgd2VsbCBhcyB0aG9zZSB0aGF0IGhhdmUgcHJldmlvdXNseSBoYWQgbWFqb3IgZ2xvYmFsIGltcGFjdHMgb2YgY2xpbmljYWwgYW5kIGVjb25vbWljIHJlbGV2YW5jZS4gTW9sZWN1bGFyIG1pY3JvYmlvbG9neSBhbmQgYmlvdGVjaG5vbG9neSB1c2VzIHRoaXMgaW5mb3JtYXRpb24gdG8gaW1wcm92ZSBkaWFnbm9zaXMsIHRyZWF0bWVudCwgZXBpZGVtaW9sb2dpY2FsIGFuYWx5c2lzLCBjb250cm9sIGFuZCBwcmV2ZW50aW9uIG9mIGluZmVjdGlvdXMgZGlzZWFzZXMuIENvcmUgdG9waWNzIGNvdmVyZWQgaW5jbHVkZSBiYWN0ZXJpYWwgZ2VuZXRpY3MgYW5kIHRoZSBldm9sdXRpb24gb2YgcmVzaXN0YW5jZSB0byBhbnRpbWljcm9iaWFsIGFnZW50cywgdGhlIG1lY2hhbmlzbXMgb2YgcmVzaXN0YW5jZSB0byBhbnRpbWljcm9iaWFsIGFnZW50cywgYW5kIHRoZSBzcHJlYWQgYW5kIGVwaWRlbWlvbG9neSBvZiBhbnRpbWljcm9iaWFsIHJlc2lzdGFuY2UgZ2VuZXMuIFRoZSBsZWN0dXJlIHByb2dyYW0gd2lsbCBmZWF0dXJlIGd1ZXN0IHNwZWFrZXJzIGZyb20gcmVzZWFyY2ggYW5kIGluZHVzdHJ5IHRvIGhpZ2hsaWdodCBjdXJyZW50IGFzcGVjdHMgaW4gbWljcm9iaW9sb2d5LiBUaGUgcHJhY3RpY2FsIGNvbXBvbmVudCBmb2N1c3NlcyBvbiB1bmRlcnN0YW5kaW5nIHRoZSBwcmluY2lwbGVzIGFuZCBwcmFjdGljZXMgb2YgbGFib3JhdG9yeSBkaWFnbm9zdGljcyB1c2luZyBjdXJyZW50IG1vbGVjdWxhciBhcHByb2FjaGVzLiBTZW1pbmFycyB3aWxsIGJlIGNvbmR1Y3RlZCBhcyB0ZWFtIHByZXNlbnRhdGlvbnMgdG8gZXhwbG9yZSBjdXJyZW50IHRvcGljcyBvbiBpbmZlY3Rpb3VzIGRpc2Vhc2VzIGluIGRlcHRoLiBUaGlzIHByb2dyZXNzaXZlIHVuaXQgYWltcyB0byBleHBvc2Ugc3R1ZGVudHMgdG8gdGhlIG11bHRpLWZhY2V0ZWQgYXBwcm9hY2hlcyByZXF1aXJlZCB3aGVuIGVuZ2FnaW5nIGlzc3VlcyBpbiBtb2xlY3VsYXIgbWljcm9iaW9sb2d5Lg0KMjUNCkludGVybmFsDQpNRURJMjAwMztNRURJMjAwOQ0KDQoNClNQRUNJQUxJWkFUSU9ODQpTUFVDLUhVTUdODQpIdW1hbiBHZW5ldGljcyBhbmQgR2Vub21pY3MNClRoaXMgc3BlY2lhbGlzYXRpb24gd2lsbCBhbGxvdyBzdHVkZW50cyB0byBwdXJzdWUgdGhlaXIgaW50ZXJlc3QgaW4gaHVtYW4gZ2VuZXRpY3MgYW5kIGdlbm9taWNzLiBJbiB0aGlzIHNwZWNpYWxpc2F0aW9uLCBzdHVkZW50cyB3aWxsIGxlYXJuIHRoZSBiYXNpYyBpZGVudGlmaWNhdGlvbiBvZiBhbGwgY2hyb21vc29tZXMgaW4gdGhlIGh1bWFuIGdlbm9tZSBhbmQgdW5kZXJzdGFuZCB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mLCBhbmQgbW9sZWN1bGFyIGJhc2lzIGZvciwgaHVtYW4gZ2VuZXRpYyBkaXNlYXNlcyBhbmQgdHJhaXRzLiBTdHVkZW50cyB3aWxsIGFsc28gbGVhcm4gdG8gc291cmNlIGFuZCBpbnRlcnByZXQgZ2VuZXRpYyBhbmQgZ2Vub21pYyBkYXRhIHVzaW5nIG9ubGluZSBkYXRhYmFzZXMgYW5kIHNwZWNpYWxpc3Qgc29mdHdhcmUuDQoxMDANClRSVUUNCk1FREkyMDEwLEdFTkUyMDAxLEdFTkUzMDAyLEJJT0wyMDAxDQoNCg0KTUpSVS1NT0xHTg0KU1BFQ0lBTElaQVRJT04NClNQVUMtUEhDT0wNClBoYXJtYWNvbG9neQ0KVGhpcyBzcGVjaWFsaXNhdGlvbiB3aWxsIGFsbG93IHN0dWRlbnRzIHRvIHB1cnN1ZSB0aGVpciBpbnRlcmVzdCBpbiBwaGFybWFjb2xvZ3kuIEl0IGlzIGRlc2lnbmVkIHRvIGludHJvZHVjZSBzdHVkZW50cyBmcm9tIGVzc2VudGlhbCB0aHJvdWdoIGFkdmFuY2VkIHByaW5jaXBsZXMgYW5kIGNvbmNlcHRzIGluIHBoYXJtYWNvbG9neSwgYW5kIGNvbXBhcmVzIGFuZCBjb250cmFzdHMgZHJ1Z3MgdGhhdCBhY3Qgb24gdGhlIGNhcmRpb3Zhc2N1bGFyLCByZXNwaXJhdG9yeSwgZ2FzdHJvaW50ZXN0aW5hbCwgcmVuYWwsIG11c2N1bG9za2VsZXRhbCwgYW5kIGVuZG9jcmluZSBzeXN0ZW1zLCBhbmQgdGhlIGF1dG9ub21pYyBhbmQgY2VudHJhbCBuZXJ2b3VzIHN5c3RlbXMuDQoxMDANClRSVUUNClBIUk0yMDA1LFBIUk0yMDA2LElNRUQzMDEwLElNRUQzMDA4DQoNCg0KTUpSVS1QSENPTA0KU1BFQ0lBTElaQVRJT04NClNQVUMtSUxMVVMNCklsbHVzdHJhdGlvbg0KVGhpcyBzcGVjaWFsaXNhdGlvbiB3aWxsIHByb3ZpZGUgYSB0aGVvcmV0aWNhbCBhbmQgcHJhY3RpY2FsIGVkdWNhdGlvbiBleHBlcmllbmNlIGFpbWVkIGF0IGRldmVsb3BpbmcgdGhlIGVzc2VudGlhbCBjcmVhdGl2ZSBhbmQgcHJhY3RpY2FsIHNraWxscyBhbmQga25vd2xlZGdlIGluIGlsbHVzdHJhdGlvbi4NCjEwMA0KRkFMU0UNCkdSREUxMDE1LEdSREUyMDE3LEdSREUyMDMxLEdSREUzMDE4DQoNCg0KDQpVTklUDQpHUkRFMTAxNQ0KSWxsdXN0cmF0aW9uIEZ1bmRhbWVudGFscw0KVGhpcyB1bml0IGludHJvZHVjZXMgc3R1ZGVudHMgdG8gdGhlIGZ1bmRhbWVudGFsIHByaW5jaXBsZXMgYW5kIHRlY2huaWNhbCBwcm9jZXNzZXMgb2YgaWxsdXN0cmF0aW9uIGRlc2lnbi4gU3R1ZGVudHMgd2lsbCBsZWFybiBob3cgdG8gdmlzdWFsaXNlIGFuZCBjb21tdW5pY2F0ZSBuYXJyYXRpdmUgY29uY2VwdHMsIGRldmVsb3BpbmcgdGhlaXIgYWJpbGl0aWVzIGFzIHNraWxsZWQgdGVjaG5pY2FsIHByYWN0aXRpb25lcnMgYW5kIHZpc3VhbCBjb21tdW5pY2F0b3JzLg0KMjUNCkludGVybmFsDQoNCg0KDQpVTklUDQpHUkRFMjAxNw0KSWxsdXN0cmF0aW9uIENvbmNlcHRzIGFuZCBQcm9jZXNzZXMNCklsbHVzdHJhdGlvbiBwcmFjdGljZSBpbnZvbHZlcyB0aGUgZXhwbG9yYXRpb24gYW5kIGRldmVsb3BtZW50IG9mIGlkZWFzIGJ5IHVzaW5nIGEgd2lkZSByYW5nZSBvZiBza2lsbHMsIHRlY2huaXF1ZXMgYW5kIHByb2Nlc3Nlcy4gVGhyb3VnaG91dCB0aGlzIHVuaXQgc3R1ZGVudHMgYXJlIGVuY291cmFnZWQgdG8gZXhwZXJpbWVudCB3aXRoIGFzIG1hbnkgZGlmZmVyZW50IHRlY2huaXF1ZXMgYXMgcG9zc2libGUuIFRoaXMgZW5hYmxlcyBzdHVkZW50cyB0byBjb252ZXkgbWVzc2FnZXMgaW4gYXBwcm9wcmlhdGUgYW5kIGVmZmVjdGl2ZSB3YXlzIHRvIGEgc2VyaWVzIG9mIGRlc2lnbiBicmllZnMuDQoyNQ0KSW50ZXJuYWwNCkdSREUxMDE1O0dSREUxMDAyOzMxMDEzMQ0KDQoNClVOSVQNCkdSREUyMDMxDQpEaWdpdGFsIElsbHVzdHJhdGlvbiBQcm9kdWN0aW9uDQpUaGlzIHVuaXQgZm9jdXNlcyBvbiB0aGUgbGVhcm5pbmcgb2YgY29udGVtcG9yYXJ5IGRpZ2l0YWwgdGVjaG5pcXVlcyB1c2VkIHRvIGV4ZWN1dGUgY29tbWVyY2lhbCBpbGx1c3RyYXRpb25zLiBTdHVkZW50cyBhcmUgaW5zdHJ1Y3RlZCBpbiBhbmQgc3R1ZHkgdGhlIGFkdmFuY2VkIHRlY2huaWNhbCBwcm9jZXNzZXMgdXNlZCBieSBpbmR1c3RyeSBwcm9mZXNzaW9uYWxzIGFjcm9zcyB0aGUgaWxsdXN0cmF0aW9uIGluZHVzdHJ5Lg0KMjUNCkludGVybmFsDQoNCg0KDQpVTklUDQpHUkRFMzAxOA0KSWxsdXN0cmF0aW9uIGFuZCBWaXN1YWwgRGV2ZWxvcG1lbnQNClRoaXMgdW5pdCBleHBsb3JlcyB0aGUgYmVuZWZpdHMgb2YgdGhlIHJvbGUgb2YgdGhlIGNvbXB1dGVyIGluIG1vZGVybiBpbWFnZSBtYWtpbmcgdGVjaG5pcXVlcy4gSXQgc2VydmVzIHRvIGJyZWFrIGRvd24gdGhlIHRyYWRpdGlvbmFsIGJhcnJpZXJzIGJldHdlZW4gaWxsdXN0cmF0aW9uIGFuZCBwaG90b2dyYXBoeSBieSBzeW50aGVzaXNpbmcgdGhlIGNvbW1vbiBncm91bmQgaW4gYm90aCBmaWVsZHMgb2YgaW1hZ2UgY3JlYXRpb24gYW5kIGVuaGFuY2VtZW50Lg0KMjUNCkludGVybmFsDQpHUkRFMjAxOTtHUkRFMjAxNzszMTMzMDYNCg0KDQpTUEVDSUFMSVpBVElPTg0KU1BVQy1BU0lBTg0KQXNpYW4gU3R1ZGllcw0KVGhpcyBzcGVjaWFsaXNhdGlvbiBwcm92aWRlcyBzdHVkZW50cyB3aXRoIGFuIGludHJvZHVjdGlvbiB0byBBc2lhbiBzdHVkaWVzLCBpbmNsdWRpbmcgQ2hpbmVzZSBhbmQgSmFwYW5lc2UgbGFuZ3VhZ2UuDQoxMDANCkZBTFNFDQpBU0lBMjAwMyxBU0lBMzAwMSxDSElOMTAwMCxKQVBOMTAwMA0KDQoNCg0KVU5JVA0KQVNJQTIwMDMNClNvY2lhbCBJbXBhY3Qgb2YgRWNvbm9taWMgQ2hhbmdlcyBpbiBDaGluYSBhbmQgSmFwYW4NCkEgY29tcGFyYXRpdmUgcGVyc3BlY3RpdmUgb24gZWNvbm9taWMgZ3Jvd3RoIGFuZCBzb2NpYWwgdHJhbnNmb3JtYXRpb24gaXMgb2ZmZXJlZCBpbiB0aGlzIHVuaXQsIHdpdGggc3BlY2lhbCBlbXBoYXNpcyBvbiBDaGluYSBhbmQgSmFwYW4uIFRoZSB1bml0IGV4cGxhaW5zIHRoZSBkaXZlcnNlIHBhdGhzIG9mIEFzaWFuIGNvdW50cmllcyB0byBtb2Rlcm5pdHksIGFuZCB0b3BpY3MgaW5jbHVkZTogQXNpYW4gcGVyc3BlY3RpdmVzIG9mIGVjb25vbWljIGRldmVsb3BtZW50LCBzdGF0ZS1sZWQgbWFya2V0IGVjb25vbWllcywgc3RhdGUgcG93ZXIgYW5kIHBvbGl0aWNhbCBjdWx0dXJlcywgY2l2aWwgc29jaWV0eSBhbmQgZ292ZXJubWVudCBwb2xpY2llcywgc3VzdGFpbmFibGUgZGV2ZWxvcG1lbnQgYW5kIHNvY2lhbCBtb3ZlbWVudHMsIHB1YmxpYyBvcGluaW9uIGluIGVudmlyb25tZW50YWwgZGViYXRlcywgaGlzdG9yaWNhbCBpc3N1ZXMgYW5kIHJlZ2lvbmFsIHRlbnNpb24gaW4gQXNpYTsgdGhlIGltcGFjdCBvZiBuYXRpb25hbGlzbSwgcmVnaW9uYWxpc20gYW5kIGdsb2JhbGlzYXRpb24gb24gaW50ZXItc3RhdGUgY29uZmxpY3Q7IGFuZCByZWdpb25hbCBpbnRlZ3JhdGlvbiBpbiB0aGUgQXNpYW4gMjFzdCBjZW50dXJ5Lg0KMjUNCkludGVybmFsDQoNCg0KDQpVTklUDQpBU0lBMzAwMQ0KQXNpYW4gQ2VudHVyeSBJc3N1ZXMgYW5kIFBlcnNwZWN0aXZlcw0KVGhpcyB1bml0IGV4YW1pbmVzIHRoZSB3YXlzIGluIHdoaWNoIHNwZWNpYWxpc3RzIGluIGFyZWEgc3R1ZGllcyBoYXZlIGNvbmR1Y3RlZCByZXNlYXJjaCwgdGhyb3VnaCBlbmdhZ2VtZW50cyB3aXRoIGlkZWFzIGFuZCBib2RpZXMgb2YgZXZpZGVuY2UuIEl0IGFsc28gZXhwbG9yZXMgdGhlIHdheXMgaW4gd2hpY2ggYXJlYSBzcGVjaWFsaXN0cycga25vd2xlZGdlIGlzIGFwcGxpZWQgaW4gdGhlIHdvcmtwbGFjZSBhbmQgYnVzaW5lc3MgZW52aXJvbm1lbnRzIG9mIEFzaWEuIFRoZSB1bml0IGRldmVsb3BzIHJlZmxlY3RpdmUgdW5kZXJzdGFuZGluZ3Mgb2YgZG9pbmcgcmVzZWFyY2ggb24gQXNpYS1mb2N1c2VkIGlzc3VlcyBhbmQgcGVyc3BlY3RpdmVzLg0KMjUNCkludGVybmFsDQoNCg0KDQpVTklUDQpDSElOMTAwMA0KQmVnaW5uaW5nIENoaW5lc2UNClRoaXMgdW5pdCBpbnRyb2R1Y2VzIGJhc2ljIGNvbW11bmljYXRpdmUgc2tpbGxzIGluIE1hbmRhcmluIENoaW5lc2UgYXQgYW4gZWxlbWVudGFyeSBsZXZlbC4gU3R1ZGVudHMgYWNxdWlyZSB0aGUgZm91ciBlc3NlbnRpYWwgbGFuZ3VhZ2Ugc2tpbGxzIG9mIHNwZWFraW5nLCBsaXN0ZW5pbmcsIHJlYWRpbmcgYW5kIHdyaXRpbmcgdGhyb3VnaCBhbXBsZSBwcmFjdGljZSBpbiBjb21tdW5pY2F0aXZlIGFjdGl2aXRpZXMgc3VwcG9ydGVkIGJ5IGRpZ2l0YWwgdGVjaG5vbG9neS4gU3R1ZGVudHMgd2lsbCBhbHNvIGJlIGludHJvZHVjZWQgdG8gQ2hpbmVzZSBzb2NpZXR5LCBDaGluZXNlIGN1bHR1cmUgYW5kIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIENoaW5lc2UgbGFuZ3VhZ2UgdGhyb3VnaCBtaW5pLWxlY3R1cmVzLCBhdWRpby12aXN1YWwgcHJlc2VudGF0aW9ucyBhbmQgcmVhbC10aW1lIGNsYXNzcm9vbS1iYXNlZCBvciBvbmxpbmUgdHV0b3JpYWxzLg0KMjUNCkludGVybmFsLEZ1bGx5IE9ubGluZQ0KDQoNCjEyMzIxDQpVTklUDQpKQVBOMTAwMA0KQmVnaW5uaW5nIEphcGFuZXNlDQpUaGlzIHVuaXQgaW50cm9kdWNlcyBiYXNpYyBjb21tdW5pY2F0aXZlIHNraWxscyBpbiBKYXBhbmVzZSBhdCBhbiBlbGVtZW50YXJ5IGxldmVsLiBTdHVkZW50cyBhY3F1aXJlIHRoZSBmb3VyIGVzc2VudGlhbCBsYW5ndWFnZSBza2lsbHMgb2Ygc3BlYWtpbmcsIGxpc3RlbmluZywgcmVhZGluZyBhbmQgd3JpdGluZyBjaGFyYWN0ZXJzIChIaXJhZ2FuYSwgS2F0YWthbmEsIGFuZCBLYW5qaSkgdGhyb3VnaCBhbXBsZSBwcmFjdGljZSBpbiBjb21tdW5pY2F0aXZlIGFjdGl2aXRpZXMgc3VwcG9ydGVkIGJ5IGRpZ2l0YWwgdGVjaG5vbG9neS4gU3R1ZGVudHMgd2lsbCBhbHNvIGJlIGludHJvZHVjZWQgdG8gSmFwYW5lc2Ugc29jaWV0eSBhbmQgY3VsdHVyZSB0aHJvdWdoIG1pbmktbGVjdHVyZXMsIGF1ZGlvLXZpc3VhbCBwcmVzZW50YXRpb25zIGFuZCB2aXJ0dWFsIHJlYWwtdGltZSBjbGFzc3Jvb20tYmFzZWQgb3Igb25saW5lIHR1dG9yaWFscy4NCjI1DQpJbnRlcm5hbCxGdWxseSBPbmxpbmUNCg0KDQoxMTI2NQ0KU1BFQ0lBTElaQVRJT04NClNQVUMtQ0hOU0UNCkNoaW5lc2UgTGFuZ3VhZ2UNClRoaXMgc3BlY2lhbGlzYXRpb24gcHJvdmlkZXMgc3R1ZGVudHMgd2l0aCBhbiBpbnRyb2R1Y3Rpb24gdG8gdGhlIENoaW5lc2UgbGFuZ3VhZ2UuDQoxMDANCkZBTFNFDQpDSElOMTAwMCxDSElOMTAwMSxDSElOMjAwMSxDSElOMjAwMg0KDQoNCg0KVU5JVA0KQ0hJTjEwMDENCkJlZ2lubmluZyBDaGluZXNlIERldmVsb3BpbmcNClRoaXMgdW5pdCBjb3ZlcnMgYm90aCB3cml0dGVuIGFuZCBzcG9rZW4gQ2hpbmVzZSBhdCBhbiBpbnRyb2R1Y3RvcnkgbGV2ZWwgdGhhdCBidWlsZHMgb24gcHJpb3Iga25vd2xlZGdlIGdhaW5lZCBpbiBDSElOMTAwMC4gIEEgY29tbXVuaWNhdGlvbi1vcmllbnRlZCBhcHByb2FjaCBpcyB1c2VkIHRvIGhlbHAgc3R1ZGVudHMgZGV2ZWxvcCBjb25maWRlbmNlIGluIHNwZWFraW5nLCBsaXN0ZW5pbmcsIHJlYWRpbmcgYW5kIHdyaXRpbmcgU3RhbmRhcmQgTW9kZXJuIENoaW5lc2Ugc28gdGhhdCB0aGV5IHdpbGwgYmUgYWJsZSB0byBpbnRlcmFjdCB3aXRoIHNwZWFrZXJzIG9mIENoaW5lc2UgaW4gc2ltcGxlIGRheS10by1kYXkgc2l0dWF0aW9ucy4gQSB3aWRlciByYW5nZSBvZiB0b3BpY3Mgb24gQ2hpbmVzZSBzb2NpZXR5IGFuZCBjdWx0dXJlIHdpbGwgYWxzbyBiZSBpbnRyb2R1Y2VkIHRocm91Z2ggbWluaS1sZWN0dXJlcywgYXVkaW8tdmlzdWFsIHByZXNlbnRhdGlvbnMgYW5kIHJlYWwtdGltZSBjbGFzc3Jvb20tYmFzZWQgb3Igb25saW5lIHR1dG9yaWFscy4NCjI1DQpJbnRlcm5hbCxGdWxseSBPbmxpbmUNCg0KDQoxMjMyMg0KVU5JVA0KQ0hJTjIwMDENClByZS1JbnRlcm1lZGlhdGUgQ2hpbmVzZQ0KRnVydGhlciBkZXZlbG9wcyBzdHVkZW50cycgY29tbXVuaWNhdGl2ZSBjb21wZXRlbmNlIGluIHRoZSBDaGluZXNlIGxhbmd1YWdlIG92ZXIgYSB3aWRlciByYW5nZSBvZiBzaXR1YXRpb25zLiBDb252ZXJzYXRpb24sIHJlYWRpbmdzLCBkaXNjdXNzaW9ucyBhbmQgcmVwb3J0IHdyaXRpbmcgd2lsbCBiZSBjb25kdWN0ZWQgb24gdG9waWNzIGluIHJlbGF0aW9uIHRvIGNvbnRlbXBvcmFyeSBDaGluZXNlIHNvY2lldHkgYW5kIGN1bHR1cmUuIFRoZSBjdWx0dXJhbCBzaWduaWZpY2FuY2Ugb2YgbGFuZ3VhZ2UgdXNhZ2Ugd2lsbCBiZSBleGFtaW5lZCwgdG9nZXRoZXIgd2l0aCBzeXN0ZW1hdGljIGRpc2N1c3Npb24gb2YgYXBwcm9wcmlhdGUgbWFubmVycyBhbmQgc29jaWFsIGV0aXF1ZXR0ZSB0byBlbmFibGUgZWZmZWN0aXZlIGNvbW11bmljYXRpb24gd2l0aCBDaGluZXNlIHNwZWFrZXJzLg0KMjUNCkludGVybmFsDQoNCg0KDQpVTklUDQpDSElOMjAwMg0KUHJlLUludGVybWVkaWF0ZSBDaGluZXNlIERldmVsb3BpbmcNCkZ1cnRoZXIgZGV2ZWxvcHMgY29tbXVuaWNhdGl2ZSBjb21wZXRlbmNlIGluIHRoZSBDaGluZXNlIGxhbmd1YWdlIHRocm91Z2ggY29sbGFib3JhdGl2ZSBhbmQgc2VsZi1kaXJlY3RlZCBsZWFybmluZyBhY3Rpdml0aWVzLiBTdHVkZW50cyB3aWxsIGFjcXVpcmUgc2tpbGxzIGluIGhhbmRsaW5nIHNob3J0IHdyaXR0ZW4gdGV4dHMgb24gdG9waWNzIHJlbGF0aW5nIHRvIGNvbnRlbXBvcmFyeSBDaGluZXNlIHNvY2lldHkuIFRoZXkgd2lsbCBiZSBlbmNvdXJhZ2VkIHRvIGV4cHJlc3Mgb3BpbmlvbnMsIGNvbmR1Y3QgZGlzY3Vzc2lvbnMgYW5kIHByZXNlbnQgcmVwb3J0cy4gUmVsZXZhbnQgY3VsdHVyYWwgYW5kIHNvY2lhbCBpc3N1ZXMgd2lsbCBiZSBkaXNjdXNzZWQuDQoyNQ0KSW50ZXJuYWwNCjEyMzA5O0NISU4yMDAxDQoNCjEyMzI0DQpTUEVDSUFMSVpBVElPTg0KU1BVQy1KQVBBTg0KSmFwYW5lc2UgTGFuZ3VhZ2UNClRoaXMgc3BlY2lhbGlzYXRpb24gcHJvdmlkZXMgc3R1ZGVudHMgd2l0aCBhbiBpbnRyb2R1Y3Rpb24gdG8gdGhlIEphcGFuZXNlIGxhbmd1YWdlLg0KMTAwDQpGQUxTRQ0KSkFQTjIwMDEsSkFQTjIwMDIsSkFQTjMwMDAsSkFQTjMwMDENCg0KDQoNClVOSVQNCkpBUE4yMDAxDQpJbnRlcm1lZGlhdGUgSmFwYW5lc2U6IEV2ZXJ5ZGF5IENvbnRleHRzDQpUaGlzIHVuaXQgaGFzIGFuIGVtcGhhc2lzIG9uIHRoZSBpbnRlcmFjdGl2ZSB1c2Ugb2YgdGhlIEphcGFuZXNlIGxhbmd1YWdlIGFuZCBpcyBhaW1lZCBhdCBpbmNyZWFzaW5nIHN0dWRlbnQgY29tbXVuaWNhdGl2ZSBjb21wZXRlbmNlIGluIGxpc3RlbmluZywgc3BlYWtpbmcsIHJlYWRpbmcgYW5kIHdyaXRpbmcuIEl0IHByb3ZpZGVzIHN0dWRlbnRzIHdpdGggb3Bwb3J0dW5pdGllcyB0byBlc3RhYmxpc2ggZXNzZW50aWFsIHNraWxscyB3aXRoIGEgZm9jdXMgb24gcHJhY3RpY2FsLCBldmVyeWRheSB1c2Ugb2YgdGhlIEphcGFuZXNlIGxhbmd1YWdlLiBTdHVkZW50cyBhcmUgYWJsZSB0byBjb21wYXJlIGFuZCBjb250cmFzdCBKYXBhbmVzZSBjdWx0dXJlIHdpdGggdGhlaXIgb3duLCBhbmQgb3RoZXIgY3VsdHVyZXMgdGhyb3VnaCBzaXR1YXRpbmcgdGhlIHVzZSBvZiB0aGUgSmFwYW5lc2UgbGFuZ3VhZ2UgaW4gcmVsZXZhbnQgc29jaWFsIGFuZCBjdWx0dXJhbCBjb250ZXh0cy4NCjI1DQpJbnRlcm5hbA0KDQoNCg0KVU5JVA0KSkFQTjIwMDINCkludGVybWVkaWF0ZSBKYXBhbmVzZTogRXh0ZW5kaW5nIEV2ZXJ5ZGF5IENvbnRleHRzDQpUaGlzIHVuaXQgaGFzIGFuIGVtcGhhc2lzIG9uIHRoZSBpbnRlcmFjdGl2ZSB1c2Ugb2YgdGhlIEphcGFuZXNlIGxhbmd1YWdlIGFuZCBmdXJ0aGVyIGRldmVsb3BzIGNvbW11bmljYXRpdmUgY29tcGV0ZW5jZSBpbiBzcGVha2luZywgbGlzdGVuaW5nLCByZWFkaW5nLCB3cml0aW5nIGFuZCBjdWx0dXJhbCBrbm93bGVkZ2UuIEl0IHByb3ZpZGVzIHN0dWRlbnRzIHdpdGggb3Bwb3J0dW5pdGllcyB0byBhcHBseSBhbmQgZXh0ZW5kIHNraWxscyB3aXRoIGEgZm9jdXMgb24gcHJhY3RpY2FsLCBldmVyeWRheSB1c2Ugb2YgdGhlIEphcGFuZXNlIGxhbmd1YWdlLiBTdHVkZW50cyBhcmUgYWJsZSB0byBjb21wYXJlIGFuZCBjb250cmFzdCBKYXBhbmVzZSBjdWx0dXJlIHdpdGggdGhlaXIgb3duLCBhbmQgb3RoZXIgY3VsdHVyZXMgdGhyb3VnaCBzaXR1YXRpbmcgdGhlIHVzZSBvZiB0aGUgSmFwYW5lc2UgbGFuZ3VhZ2UgaW4gcmVsZXZhbnQgc29jaWFsIGFuZCBjdWx0dXJhbCBjb250ZXh0cy4NCjI1DQpJbnRlcm5hbA0KDQoNCg0KVU5JVA0KSkFQTjMwMDANCkludGVybWVkaWF0ZSBKYXBhbmVzZQ0KQ29tbXVuaWNhdGl2ZSBjb252ZXJzYXRpb24gYW5kIGF1cmFsIGNvbXByZWhlbnNpb24gYXQgdGVydGlhcnkgZWR1Y2F0aW9uIGxldmVsLCBmb3Igbm9uLW5hdGl2ZSBzcGVha2VycyBvZiBKYXBhbmVzZSwgZXF1aXZhbGVudCB0byBsZXZlbCBOMyBvZiB0aGUgSmFwYW5lc2UgTGFuZ3VhZ2UgUHJvZmljaWVuY3kgVGVzdC4gUmVhZGluZyBtYXRlcmlhbHMgZGlyZWN0bHkgcmVsYXRlZCB0byBldmVyeWRheSBsaWZlIG9mIHVuaXZlcnNpdHkgc3R1ZGVudHMgaW4gSmFwYW4gY29udGFpbmluZyBwb3N0IGhpZ2ggc2Nob29sIGxldmVsIHNlbnRlbmNlIHN0cnVjdHVyZXMgYW5kIGlkaW9tYXRpYyBleHByZXNzaW9ucy4gVXNlIG9mIEphcGFuZXNlIGxhbmd1YWdlIGZvbnQgb24gYSBjb21wdXRlci4NCjI1DQpJbnRlcm5hbA0KDQoNCg0KVU5JVA0KSkFQTjMwMDENCkludGVybWVkaWF0ZSBKYXBhbmVzZSBEZXZlbG9waW5nDQpDb252ZXJzYXRpb24gYW5kIGF1cmFsIGNvbXByZWhlbnNpb24gYXQgcG9zdCBoaWdoIHNjaG9vbCBsZXZlbCwgZm9yIG5vbi1uYXRpdmUgc3BlYWtlcnMgb2YgSmFwYW5lc2UsIGVxdWl2YWxlbnQgdG8gbGV2ZWwgTjMgb2YgdGhlIEphcGFuZXNlIExhbmd1YWdlIFByb2ZpY2llbmN5IFRlc3QuIFJlYWRpbmcgbGl0ZXJhdHVyZSBvbiBKYXBhbmVzZSBjdWx0dXJlIGNvbnRhaW5pbmcgY29tcGxleCBzZW50ZW5jZSBzdHJ1Y3R1cmVzIGFuZCBoaWdobHkgaWRpb21hdGljIGV4cHJlc3Npb25zLiBJbnRyb2R1Y3Rpb24gb2YgYW4gYWRkaXRpb25hbCAxMDAgSmFwYW5lc2UgY2hhcmFjdGVycyAoS2FuamkpLiBQcmFjdGljZSBvbiB2YXJpb3VzIGZvcm1zIHJlcHJlc2VudGluZyBzcGVlY2ggbGV2ZWxzLg0KMjUNCkludGVybmFsDQoNCg0KDQpTUEVDSUFMSVpBVElPTg0KU1BVQy1DT1JQRw0KQ29ycG9yYXRlIEdvdmVybmFuY2UNClRoaXMgc3BlY2lhbGlzYXRpb24gcHJvdmlkZXMgc3R1ZGVudHMgd2l0aCB0aGUgcmVsZXZhbnQga25vd2xlZGdlIGFib3V0IHRoZSByb2xlIG9mIGNvcnBvcmF0ZSBnb3Zlcm5hbmNlLg0KMTAwDQpGQUxTRQ0KQkxBVzIwMDYsQkxBVzIwMTEsQkxBVzEwMDYsQkxBVzMwMDQNCg0KDQoNClVOSVQNCkJMQVcyMDA2DQpDb21wYW55IExhdyBmb3IgQnVzaW5lc3MNClRoZSB1bml0IGFpbXMgdG8gcHJvdmlkZSBzdHVkZW50cyB3aXRoIGEgc29saWQgZm91bmRhdGlvbiBvZiBmdW5kYW1lbnRhbCBwcmluY2lwbGVzIG9mIGNvbXBhbnkgbGF3LiBUb3BpY3MgaW5jbHVkZTogdGhlIGNvbnRleHQgb2YgY29tcGFueSBsYXcsIHRoZSByb2xlIGFuZCBmdW5jdGlvbnMgb2YgdGhlIEF1c3RyYWxpYW4gU2VjdXJpdGllcyBhbmQgSW52ZXN0bWVudHMgQ29tbWlzc2lvbiwgdHlwZXMgb2YgYnVzaW5lc3Mgc3RydWN0dXJlcywgaW5jb3Jwb3JhdGlvbiBhbmQgcmVnaXN0cmF0aW9uLCB0aGUgZG9jdHJpbmUgb2YgbGVnYWwgcGVyc29uYWxpdHksIGNvcnBvcmF0ZSBmdW5kIHJhaXNpbmcgYW5kIHNoYXJlIGNhcGl0YWwsIGxlZ2FsIHJ1bGVzIHJlbGF0aW5nIHRvIHNoYXJlcyBhbmQgZGl2aWRlbmRzLCB0aGUgaW50ZXJuYWwgbWFuYWdlbWVudCBvZiBjb21wYW5pZXMsIHBvd2VycyBhbmQgZHV0aWVzIG9mIHZhcmlvdXMgc3Rha2Vob2xkZXJzLCByaWdodHMgYW5kIHJlbWVkaWVzIG9mIG1lbWJlcnMsIGNvbXBhbnkgaW5zb2x2ZW5jeSBhbmQgZGVyZWdpc3RyYXRpb24uDQoyNQ0KSW50ZXJuYWwsRnVsbHkgT25saW5lDQoNCg0KMjg0NA0KVU5JVA0KQkxBVzIwMTENClNhZmV0eSBhbmQgRW52aXJvbm1lbnRhbCBIZWFsdGggTGF3DQpUaGUgY29tbW9uIGxhdyBsZWdhbCBzeXN0ZW0sIGluY2x1ZGluZyBwYXJsaWFtZW50YXJ5LCBnb3Zlcm5tZW50IGFuZCBjb3VydCBzeXN0ZW1zLiBTcGVjaWZpYyBhcmVhcyBvZiBsYXcgaW4gV2VzdGVybiBBdXN0cmFsaWEgaW5jbHVkaW5nIG5lZ2xpZ2VuY2UsIGVtcGxveWVyJ3MgbGlhYmlsaXR5IGZvciBpbmp1cmllcyB0byB3b3JrZXJzLCB3b3JrZXJzIGNvbXBlbnNhdGlvbiwgb2NjdXBhdGlvbmFsIGhlYWx0aCBhbmQgc2FmZXR5IGxhd3MgYW5kIGVudmlyb25tZW50YWwgbGF3cy4NCjI1DQpJbnRlcm5hbCxGdWxseSBPbmxpbmUNCg0KDQoNClVOSVQNCkJMQVcxMDA2DQpJbnRyb2R1Y3Rpb24gdG8gQnVzaW5lc3MgTGF3DQpBbiBpbnRyb2R1Y3Rpb24gdG8gbGF3IHdpdGggYSBidXNpbmVzcyBmb2N1cy4gSW4gdGhpcyB1bml0LCBzdHVkZW50cyB3aWxsIGV4YW1pbmUgdGhlIG5hdHVyZSBhbmQgc291cmNlcyBvZiBsYXcgaW4gQXVzdHJhbGlhLiBLZXkgYXNwZWN0cyBvZiBjaXZpbCBsYXcgYXMgdGhleSByZWxhdGUgdG8gYnVzaW5lc3Mgb3BlcmF0aW9ucyBhcmUgZXhwbG9yZWQgaW5jbHVkaW5nIGluc3VyYW5jZSBhbmQgZmluYW5jZS4NCjI1DQpJbnRlcm5hbCxGdWxseSBPbmxpbmUNCg0KDQoNClVOSVQNCkJMQVczMDA0DQpCdXNpbmVzcyBJbnRlbGxlY3R1YWwgUHJvcGVydHkNClRoaXMgdW5pdCBwcm92aWRlcyBhbiBvdmVydmlldyBvZiBjb3B5cmlnaHQsIGRlc2lnbiwgcGF0ZW50IGFuZCB0cmFkZW1hcmsgbGVnaXNsYXRpb24gYW5kIGFuIGV4YW1pbmF0aW9uIG9mIGhvdyBidXNpbmVzc2VzIGNhbiBwcm90ZWN0IHRoZWlyIGludGVsbGVjdHVhbCBwcm9wZXJ0eS4gSXQgYWxzbyBpbnRyb2R1Y2VzIHRoZSBjb21tb24gbGF3IHRvcnRzIG9mIGJyZWFjaCBvZiBjb25maWRlbmNlIGFuZCBwYXNzaW5nIG9mZiBhbmQgc29tZSBvZiB0aGUgY3VsdHVyYWwgaW1wbGljYXRpb25zIGFzc29jaWF0ZWQgd2l0aCBpbnRlbGxlY3R1YWwgcHJvcGVydHkgcmlnaHRzLg0KMjUNCkludGVybmFsLEZ1bGx5IE9ubGluZQ0KQkxBVzIwMDY7QkxBVzEwMDY7QkxBVzEwMDQNCg0KDQpTUEVDSUFMSVpBVElPTg0KU1BVQy1JTkVOVA0KSW5ub3ZhdGlvbiBhbmQgRW50cmVwcmVuZXVyc2hpcA0KVGhpcyBzcGVjaWFsaXNhdGlvbiBwcm92aWRlcyBicmVhZHRoIGluIGlubm92YXRpb24sIGVudHJlcHJlbmV1cnNoaXAsIGNyZWF0aXZpdHksIGRlc2lnbiB0aGlua2luZyBhbmQgcHJvdG90eXBpbmcgZm9yIGlubm92YXRpdmUgaW5kaXZpZHVhbHMgb3IgdGhvc2Ugd2lzaGluZyB0byB3b3JrIGFzIGludGVybmFsIGNvcnBvcmF0ZSBlbnRyZXByZW5ldXJzDQoxMDANCkZBTFNFDQpNR01UMzAwNyxNR01UMzAwNCxNR01UMjAwNCxNR01UMzAwMg0KDQoNCg0KVU5JVA0KTUdNVDMwMDcNCk1hbmFnZW1lbnQgb2YgSW5ub3ZhdGlvbg0KVGhpcyB1bml0IGZvY3VzZXMgb24gdGhlIG1hbmFnZW1lbnQgb2YgaW5ub3ZhdGlvbi4gIFRoZSBmdW5kYW1lbnRhbCBpZGVhcyB1bmRlcmx5aW5nIHRoaXMgdW5pdCBhcmUgdGhhdCAoMSkgaW5ub3ZhdGlvbiBpcyB0aGUgZHJpdmluZyBmb3JjZSBpbiBlc3RhYmxpc2hpbmcgYSBmaXJt4oCZcyBjb21wZXRpdGl2ZSBhZHZhbnRhZ2UsICgyKSBpbm5vdmF0aW9uIGlzIG1hbmFnZWQgYnkgbGVhZGVycyBhbmQgdGVhbXMgd2l0aCBtdWx0aXBsZSBjb21wZXRlbmNpZXMsIGFuZCAoMykgYSBmaXJt4oCZcyBpbm5vdmF0aW9uIHN0cmF0ZWd5IGVtZXJnZXMgZnJvbSBpdHMgY29tcGV0ZW5jaWVzIGFuZCBjYXBhYmlsaXRpZXMuIFRoZXNlIGZ1bmRhbWVudGFscyBhcmUgdGhlbiBhcHBsaWVkIHRvIG5ldyB2ZW50dXJlIGNyZWF0aW9uIHRocm91Z2ggZmlyc3QgaGFuZCBpbnRlcmFjdGlvbiB3aXRoIGlubm92YXRpdmUgZW50cmVwcmVuZXVycyBkZXZlbG9waW5nIG5ldyBpbm5vdmF0aW9ucyBhbmQgdGVjaG5vbG9naWVzIGZyb20gdGhlIGJ1c2luZXNzIGNvbW11bml0eSBhcyB3ZWxsIGFzIHVuaXZlcnNpdHkgZGV2ZWxvcGVkIGludmVudGlvbnMgd2l0aCBpbnRlbnQgdG8gY29tbWVyY2lhbGlzZSB0aGVpciBJbnRlbGxlY3R1YWwgUHJvcGVydHkuIFRoaXMgYWxsb3dzIHRoZSByZWFsIHdvcmxkIG9mIHRoZSBpbm5vdmF0aXZlIGVudHJlcHJlbmV1ciB0byByZWluZm9yY2UgYW5kIHNvbWV0aW1lcyBjaGFsbGVuZ2UgYWNjZXB0ZWQgdGhlb3JpZXMgb2YgaW5ub3ZhdGlvbiBhbmQgZW50cmVwcmVuZXVyc2hpcC4NCjI1DQpJbnRlcm5hbA0KDQoNCg0KVU5JVA0KTUdNVDMwMDQNCkVudHJlcHJlbmV1cnNoaXANClRoZSB1bml0IGlzIHJlc2VhcmNoIGFuZCB0aGVvcnktYmFzZWQgYnV0IHByYWN0aWNlLW9yaWVudGVkLiBVdGlsaXNpbmcgZmllbGR3b3JrIGludGVydmlld3Mgd2l0aCByZWFsLWxpZmUgZW50cmVwcmVuZXVycyBpdCBhaW1zIHRvIGVuc3VyZSB0aGF0IHN0dWRlbnRzIGFyZSBmdWxseSBhd2FyZSBvZiB0aGUgaXNzdWVzIGFuZCBjaGFsbGVuZ2VzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdG91Z2ggYnVzaW5lc3MgcmVhbGl0aWVzIG9mIGJlaW5nIGFuIGVudHJlcHJlbmV1ci4gVGhpcyBpcyBhY2hpZXZlZCBieSBleGFtaW5pbmcgYW5kIGFuYWx5c2luZyB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBlbnRyZXByZW5ldXIgYW5kIHRoZWlyIG5ldyBhbmQvb3IgZ3Jvd2luZyBidXNpbmVzcy4NCjI1DQpJbnRlcm5hbA0KDQoNCg0KVU5JVA0KTUdNVDIwMDQNCkJ1c2luZXNzIGFuZCBTdXN0YWluYWJsZSBEZXZlbG9wbWVudA0KVGhpcyBpcyBhbiBpbnRyb2R1Y3Rpb24gdG8gY29udGVtcG9yYXJ5IGVudmlyb25tZW50YWwgaXNzdWVzIHJlbGV2YW50IHRvIG1hbmFnZXJzIG9mIHRvZGF54oCZcyBhbmQgdG9tb3Jyb3figJlzIGJ1c2luZXNzIG9yZ2FuaXNhdGlvbnMuIEl0IHN1cnZleXMgY3VycmVudCBlbnZpcm9ubWVudGFsIHByb2JsZW1zLCByZXN1bHRhbnQgYnVzaW5lc3MgcmVzcG9uc2liaWxpdGllcyBhbmQgcG9zc2libGUgcmVzcG9uc2VzLiBUaGUgdW5pdCBzaGVkcyBsaWdodCBvbiB0aGUgaW50ZXJkZXBlbmRlbmNpZXMgdGhhdCBleGlzdCBiZXR3ZWVuIHRoZSBlY29ub215LCBzb2NpZXR5IGFuZCBuYXR1cmUsIGhpZ2hsaWdodGluZyBlY29sb2dpY2FsIG5lZWRzIGFuZCByZWFsaXRpZXMgYW5kIGNvbXBhcmluZyB0aG9zZSB0byB0aGUgbmVlZHMgb2YgY29tbXVuaXRpZXMsIGJ1c2luZXNzIG9wZXJhdG9ycywgZ292ZXJubWVudHMgYW5kIGJ1c2luZXNzIHN0YWtlaG9sZGVycy4gWW91IHdpbGwgYmUgc2hvd24gaG93IHRvIGlkZW50aWZ5IGFuZCB1bmRlcnN0YW5kIGVudmlyb25tZW50YWwgcHJvYmxlbXMgYW5kIHRvIGRldmVsb3AgYW4gdW5kZXJzdGFuZGluZyBvZiB0aGUgcm9sZXMgb2YsIGFuZCBvcHBvcnR1bml0aWVzIGZvciwgYnVzaW5lc3Mgd2l0aGluIHRoZSBjb250ZXh0IG9mIGdyb3dpbmcgZW52aXJvbm1lbnRhbCBjb25zdHJhaW50cy4NCjI1DQpJbnRlcm5hbCxGdWxseSBPbmxpbmUNCg0KDQoNClVOSVQNCk1HTVQzMDAyDQpNYW5hZ2luZyBDaGFuZ2UNClRoZSB1bml0IGV4YW1pbmVzIHRoZSB0aGVvcmV0aWNhbCBhbmQgcHJhY3RpY2FsIHBlcnNwZWN0aXZlcyB1c2VkIGFzIGEgZnJhbWV3b3JrIHRvIGlkZW50aWZ5IGNoYW5nZS4gVGhlIGNoYW5nZSBzdHJhdGVneSwgdG9vbHMgYW5kIG1lYXN1cmVtZW50IG9mIGNoYW5nZSBhcmUgYW5hbHlzZWQuDQoyNQ0KSW50ZXJuYWwsRnVsbHkgT25saW5lDQoNCg0KDQpTUEVDSUFMSVpBVElPTg0KU1BVQy1TTUJVUw0KU21hbGwgQnVzaW5lc3MgU3RhcnQtVXANClRoaXMgc3BlY2lhbGlzYXRpb24gaXMgZGVzaWduZWQgZm9yIGVudGVycHJpc2luZyBpbmRpdmlkdWFscyB3aG8gd2FudCB0byBzdGFydCB0aGVpciBvd24gYnVzaW5lc3MsIG9yIHdvcmsgYXMgaW50ZXJuYWwgY29ycG9yYXRlIGVudHJlcHJlbmV1cnMuDQoxMDANCkZBTFNFDQpNR01UMzAwNCxNR01UMzAwMyxNR01UMzAwNyxNR01UMjAwMQ0KDQoNCg0KVU5JVA0KTUdNVDMwMDMNClNtYWxsIEJ1c2luZXNzIEdyb3d0aA0KVGhpcyB1bml0IGZvY3VzZXMgb24gaW50ZWdyYXRpb24gYW5kIGFuYWx5c2lzIG9mIGtleSBmdW5jdGlvbnMsIGNvbmNlcHRzIGFuZCBzdHJhdGVnaWVzIGZvciBncm93dGgtb3JpZW50ZWQgU21hbGwgYW5kIE1lZGl1bSBFbnRlcnByaXNlcyAoU01FcykuIFRoZSB1bml0IGhhcyBhIHNpZ25pZmljYW50IGZpZWxkd29yayBjb21wb25lbnQgd2hlcmUgc3R1ZGVudHMgd29yayBpbiB0ZWFtcyBvciBpbmRpdmlkdWFsbHkgdG8gaWRlbnRpZnkgYSBzbWFsbCBidXNpbmVzcyBvd25lciB0aGF0IHRoZXkgY2FuIHdvcmsgd2l0aCB0aHJvdWdob3V0IHNlbWVzdGVyIHRvIGRldmVsb3AgYSB0YWlsb3JlZCByZXBvcnQgdG8gd2hpY2ggdGhlc2Uga2V5IGZ1bmN0aW9ucywgc3RyYXRlZ2llcyBhbmQgY29uY2VwdHMgYXJlIGFwcGxpZWQuIFRoZSBvd25lcnMgYXJlIGludml0ZWQgdG8gcHJvdmlkZSBpbnB1dCBpbnRvIHRoZSBhc3Nlc3NtZW50IG9mIHRoZSByZXBvcnQgdG8gcmV0YWluIHRoZSByZWFsaXR5LWJhc2VkIGFwcHJvYWNoIG9mIHRoaXMgbGl2ZSBjYXNlLg0KMjUNCkludGVybmFsDQoNCg0KDQpVTklUDQpNR01UMjAwMQ0KU3RhcnQtVXAgQnVzaW5lc3MgUGxhbm5pbmcNClRoZSB1bml0IGV4YW1pbmVzIFNtYWxsIGFuZCBNZWRpdW0gRW50ZXJwcmlzZXMgKFNNRXMpIGZyb20gYSBwcmFjdGljYWwgcGVyc3BlY3RpdmUgYW5kIHByb3ZpZGVzIHN0dWRlbnRzIHdpdGggYSAmcXVvdDtoYW5kcyBvbiBhcHByb2FjaCZxdW90OyB0byB0aGUgYXJ0IG9mIHNtYWxsIGJ1c2luZXNzIHBsYW5uaW5nLiBUaGlzIGluY2x1ZGVzIGNyZWF0aW5nIGEgYnVzaW5lc3MgcGxhbiBpbiB0ZWFtcyB0aGF0IGNvbnNpZGVycyB0aGUgbWFpbiBmdW5jdGlvbmFsIGFyZWFzIG5lY2Vzc2FyeSBmb3IgdGhlIGVzdGFibGlzaG1lbnQgYW5kIGNvbnRpbnVvdXMgb3BlcmF0aW9uIG9mIGEgc21hbGwgYnVzaW5lc3MuDQoyNQ0KSW50ZXJuYWwNCg0KDQoNClNQRUNJQUxJWkFUSU9ODQpTUFVDLUFEVlJUDQpUaGUgQnVzaW5lc3Mgb2YgQWR2ZXJ0aXNpbmcNClRoaXMgc3BlY2lhbGlzYXRpb24gaXMgZGVzaWduZWQgdG8gcHJvdmlkZSBzdHVkZW50cyB3aXRoIGFuIHVuZGVyc3RhbmRpbmcgb2YgdGhlIGJ1c2luZXNzIHByb2Nlc3MgdW5kZXJwaW5uaW5nIGFkdmVydGlzaW5nIHdoaWxzdCBhbHNvIHByb3ZpZGluZyBhbiBpbnNpZ2h0IGFuZCBhcHByZWNpYXRpb24gZm9yIHRoZSBjcmVhdGl2ZSBlbGVtZW50cyBvZiBhZHZlcnRpc2luZy4NCjEwMA0KRkFMU0UNCk1LVEcyMDAwLE1LVEcyMDAxLE1LVEczMDAyLE1LVEcyMDA2DQoNCg0KDQpVTklUDQpNS1RHMjAwMA0KSW50ZWdyYXRlZCBNYXJrZXRpbmcgQ29tbXVuaWNhdGlvbnMNClRoaXMgaXMgYW4gaW50cm9kdWN0b3J5IHVuaXQgd2hpY2ggZXhwbG9yZXMgdGhlIGltcG9ydGFuY2Ugb2YgbWFya2V0aW5nIGNvbW11bmljYXRpb24sIHRoZSBjb25jZXB0cyB1bmRlcmx5aW5nICBlZmZlY3RpdmUgbWFya2V0aW5nIGNvbW11bmljYXRpb24gYW5kIHRoZSBza2lsbHMgbmVlZGVkIHRvIGNyZWF0ZSBzaW1wbGUgaW50ZWdyYXRlZCBtYXJrZXRpbmcgY29tbXVuaWNhdGlvbiAoSU1DKSBjYW1wYWlnbnMuDQoyNQ0KSW50ZXJuYWwsRnVsbHkgT25saW5lDQoNCg0KDQpVTklUDQpNS1RHMjAwMQ0KQnJhbmQgTWFuYWdlbWVudA0KVGhpcyB1bml0IGV4dGVuZHMgb24gdGhlIHZhcmlvdXMgYXNwZWN0cyBvZiBhZHZlcnRpc2luZyBhbmQgbWFya2V0aW5nIGFuZCBhcHBsaWVzIHRoZXNlIGNvbmNlcHRzIHRvIGEgYnJhbmQgZXF1aXR5IHBlcnNwZWN0aXZlLiBUaGUgdG9waWNzIHdpbGwgYmUgYnVpbHQgYXJvdW5kIHRoZSBwcm9kdWN0L2JyYW5kIG1hbmFnZW1lbnQgZGVjaXNpb25zIGFuZCB0aHJvdWdoIHNlbWluYXJzLCBjYXNlIGFuYWx5c2VzIGFuZCBhIGJyYW5kIGF1ZGl0IHByb2plY3QuIFRoZSB1bml0IGV4YW1pbmVzIHNwZWNpZmljIGFkdmVydGlzaW5nIGFuZCBtYXJrZXRpbmcgdG9waWNzIHJlbGF0ZWQgdG8gYnVpbGRpbmcsIG1lYXN1cmluZywgYW5kIG1hbmFnaW5nIGJyYW5kIGVxdWl0eS4gU3BlY2lmaWNhbGx5LCB0aGUgdW5pdCBleGFtaW5lcyB2YXJpb3VzIGJyYW5kIG1hbmFnZW1lbnQgZGVjaXNpb25zIGFuZCB0aGUgc3RyYXRlZ2llcyBhbmQgdGFjdGljcyB0byBidWlsZCBtZWFzdXJlIGFuZCBtYW5hZ2UgYnJhbmQgZXF1aXR5LiBUaGVzZSBpbmNsdWRlIChhKSBkaXJlY3QgYW5kIGluZGlyZWN0IG1lYXN1cmVzIG9mIGJyYW5kIGVxdWl0eSwgKGIpIHN0cnVjdHVyZXMgb2YgZGVzaXJlZCBicmFuZCBrbm93bGVkZ2UsIChjKSBjaG9pY2Ugb2YgYnJhbmQgZWxlbWVudHMsIChkKSBkZXZlbG9wbWVudCBvZiBzdXBwb3J0aW5nIG1hcmtldGluZyBwcm9ncmFtcywgKGUpIGludHJvZHVjdGlvbiBvZiBuZXcgcHJvZHVjdHMgbmFtaW5nLCBjb3Jwb3JhdGUgcGVyc3BlY3RpdmVzIGFuZCAoZikgbWFuYWdlbWVudCBvZiBicmFuZHMgb3ZlciB0aW1lIGFuZCBnZW9ncmFwaGljYWwgYm91bmRhcmllcy4NCjI1DQpJbnRlcm5hbA0KDQoNCg0KVU5JVA0KTUtURzMwMDINCkFjY291bnQgTWFuYWdlbWVudA0KVGhpcyBpcyBhIHN0cmF0ZWdpYyBhY2NvdW50IG1hbmFnZW1lbnQgdW5pdCB3aGljaCBleHBsb3JlcyB0aGUgdGhlb3JpZXMgYmVoaW5kIGFuZCBwcm9jZXNzZXMgaW52b2x2ZWQgaW4gZGV2ZWxvcGluZyBhbmQgaW1wbGVtZW50aW5nIGludGVncmF0ZWQgbWFya2V0aW5nIGNvbW11bmljYXRpb24gY2FtcGFpZ25zLiBTcGVjaWZpY2FsbHksIHN0dWRlbnRzIGxlYXJuIGFib3V0IHRoZSByYXRpb25hbGUgZm9yIHNlbGVjdGluZyBhIGdpdmVuIGNyZWF0aXZlIGFuZCBtZWRpYSBzdHJhdGVneSBhcyBhIHJlc3VsdCBvZiBjb21wcmVoZW5kaW5nIHRoZSBsaW5rYWdlcyB3aXRoIGJyYW5kIHBvc2l0aW9uaW5nLCBhdWRpZW5jZSBwcm9jZXNzaW5nLCBzZW1pb3RpY3MsIGVsYWJvcmF0aW9uIGxpa2VsaWhvb2QgYW5kIGhpZXJhcmNoeSBvZiBlZmZlY3Qgb2JqZWN0aXZlcy4gU3R1ZGVudCBsZWFybmluZyBvZiB0aGVzZSBsaW5rYWdlcyBpcyBlbmFibGVkIHRocm91Z2ggYXBwbGljYXRpb24gb2YgdGhlc2UgdGhlb3JpZXMgdG8gYW4gaW5kdXN0cnkgYmFzZWQgY2xpZW50IHdoZXJlIHN0dWRlbnRzIGVuZ2FnZSBpbiBhIGhhbmRzLW9uIHRhc2sgdG8gZGV2ZWxvcCBhbiBhZHZlcnRpc2luZyBwbGFuIHRoYXQgY29uc2lzdHMgb2YgYW5hbHlzaXMgYW5kIHJhdGlvbmFsZSBmb3IgaGF2aW5nIHNlbGVjdGVkIGEgZ2l2ZW4gY3JlYXRpdmUgYW5kIG1lZGlhIHN0cmF0ZWd5LiBTdHVkZW50cyBhcmUgYWJsZSB0byB1c2UgdGhlaXIgdGhlb3JldGljYWwga25vd2xlZGdlIHRvIGp1c3RpZnkgYW5kIHByb3ZpZGUgcmF0aW9uYWxlIGZvciB0aGVpciBjcmVhdGl2ZSBhbmQgbWVkaWEgcmVjb21tZW5kYXRpb25zLg0KMjUNCkludGVybmFsDQoxMTAxNjtNS1RHMjAwMA0KDQoNClVOSVQNCk1LVEcyMDA2DQpNYW5hZ2luZyBTb2NpYWwgTWVkaWEgUGxhdGZvcm1zDQpUaGlzIHVuaXQgcHJvdmlkZXMgc3R1ZGVudHMgd2l0aCBib3RoIGEgdGhlb3JldGljYWwgYW5kIGFwcGxpZWQgdW5kZXJzdGFuZGluZyBvZiBtYW5hZ2luZyBzb2NpYWwgbWVkaWEgcGxhdGZvcm1zLiBUaGUgdW5pdCByZXZpZXdzIHNvY2lhbCBtZWRpYSBwbGF0Zm9ybXMsIGNyaXRpY2FsIHJlc2VhcmNoIGFuZCBhZ2VuY3kgYmVzdCBwcmFjdGljZSBpbiBzb2NpYWwgbWVkaWEgbWFya2V0aW5nLiBTdHVkZW50cyB3aWxsIGRldmVsb3AgYW4gdW5kZXJzdGFuZGluZyBvZiB0aGUgc29jaWFsIG1lZGlhIGxhbmRzY2FwZSwgc29jaWFsIG1lZGlhIHBsYXRmb3JtcywgZGV2ZWxvcCBkaWdpdGFsIGxpdGVyYWN5IGFzIHdlbGwgYXMgYW4gdW5kZXJzdGFuZGluZyBvZiBldGhpY2FsIGFuZCByZWd1bGF0b3J5IGNvbmR1Y3QgaW4gdGhlIHNvY2lhbCBtZWRpYSBzcGFjZS4NCjI1DQpJbnRlcm5hbCxGdWxseSBPbmxpbmUNCg0KDQoNClNQRUNJQUxJWkFUSU9ODQpTUFVDLU1SS1RHDQpNYXJrZXRpbmcgRm91bmRhdGlvbnMNClRoaXMgc3BlY2lhbGlzYXRpb24gcHJlcGFyZXMgc3R1ZGVudHMgdG8gb3JnYW5pc2UgYW5kIGNvbnRyb2wgbWFya2V0aW5nIGFjdGl2aXRpZXMgZWZmaWNpZW50bHkgaW4gYSBoaWdobHkgY29tcGV0aXRpdmUgYW5kIHZvbGF0aWxlIGVudmlyb25tZW50Lg0KMTAwDQpGQUxTRQ0KTUtURzIwMDIsTUtURzIwMDQsTUtURzMwMDMsTUtURzEwMDANCg0KDQoNClVOSVQNCk1LVEcyMDAyDQpNYXJrZXRpbmcgQWNyb3NzIEJvcmRlcnMNCkNvdmVycyB0b3BpY3MgcmVsYXRlZCB0byB0aGUgaW50ZXJuYXRpb25hbCBtYXJrZXRwbGFjZSwgbXVsdGktbmF0aW9uYWwsIGdsb2JhbCBhbmQgdHJhbnNuYXRpb25hbCBjb3Jwb3JhdGlvbnMgYW5kIGludGVybmF0aW9uYWwgdHJhZGluZyBjb21wYW5pZXMuIEtub3dsZWRnZSBpcyBnYWluZWQgaW4gd29ybGQgb3JnYW5pc2F0aW9uYWwgb3IgcmVnaW9uYWwgdHJhZGUsIHRyYWRlIGJsb2NrcyBhbmQgaW50ZXJuYXRpb25hbCBtYXJrZXRpbmcgb3Bwb3J0dW5pdGllcywgYW5kIGRldmVsb3BlZCBhbmQgbGVzcyBkZXZlbG9wZWQgY291bnRyeSBjb3VudGVyIHRyYWRlLg0KMjUNCkZ1bGx5IE9ubGluZSxJbnRlcm5hbA0KDQoNCg0KVU5JVA0KTUtURzIwMDQNCkNvbnN1bWVyIEJlaGF2aW91cg0KSW50cm9kdWNlcyB0aGUgcm9sZSBvZiBjb25zdW1lciBiZWhhdmlvdXIgYW5kIGhvdyBpdCBpcyBzaGFwZWQgYnkgdGhlIHNvY2lhbCBhbmQgY3VsdHVyYWwgZW52aXJvbm1lbnQgYW5kIHRoZSBwc3ljaG9sb2dpY2FsIGZvdW5kYXRpb25zLiBUaGUgdW5pdCBpbiBlc3NlbmNlIGZvY3VzZXMgb24gdGhlIGRlY2lzaW9uIHByb2Nlc3NlcyBpbiBjb25zdW1wdGlvbiBiZWhhdmlvdXIgaW4gZGlmZmVyZW50IGJ1eWluZyBzaXR1YXRpb25zLiBUaGlzIGRldmVsb3BzIHRoZSBzdHVkZW50J3MgYWJpbGl0eSB0byBpbnRlZ3JhdGUgbWFya2V0aW5nIHByb2Nlc3NlcyBhdCBhIGhpZ2hlciBsZXZlbC4gRm9yIG1hcmtldGVycywgYW4gdW5kZXJzdGFuZGluZyBvZiBob3cgYSBjb25zdW1lciBzZWxlY3RzLCBwdXJjaGFzZXMsIHVzZXMgYW5kIGRpc3Bvc2VzIG9mIHByb2R1Y3RzIGFuZCBzZXJ2aWNlcyBpcyBwZXJ0aW5lbnQgdG8gc3VjY2Vzc2Z1bGx5IG1hbmFnaW5nIHRoZSBtYXJrZXRpbmcgZnVuY3Rpb24uIENvbmNlcHRzIGRyYXduIGZyb20gdmFyaW91cyBkaXNjaXBsaW5lcyBzdWNoIGFzIHBzeWNob2xvZ3ksIGVjb25vbWljcyBhbmQgYW50aHJvcG9sb2d5IGFyZSBhbHNvIGV4YW1pbmVkLg0KMjUNCkZ1bGx5IE9ubGluZSxJbnRlcm5hbA0KDQoNCg0KVU5JVA0KTUtURzMwMDMNCkRpZ2l0YWwgTWFya2V0aW5nIFN0cmF0ZWd5DQpUaGlzIHVuaXQgaW50cm9kdWNlcyBzdHVkZW50cyB0byB0aGUgd29ybGQgb2YgZGlnaXRhbCBtYXJrZXRpbmcuIEl0IGJyb2FkZW5zIHVuZGVyc3RhbmRpbmcgb2YgdGhlIG5vbi10ZWNobmljYWwgYXNwZWN0cyBvZiB0aGUgaW50ZXJuZXQgYW5kIGl0cyBzdHJhdGVnaWMgbWFya2V0aW5nIGFwcGxpY2F0aW9ucy4gVGhlIHVuaXQgY292ZXJzIGhvdyB0aGUgZGlnaXRhbCBlbnZpcm9ubWVudCBhZmZlY3RzIG1hcmtldGluZyBkZWNpc2lvbnMgdGhyb3VnaCBpZGVudGlmeWluZyB3ZWItYmFzZWQgb3Bwb3J0dW5pdGllcyBhbmQgdGhyZWF0cyBmb3IgZmlybXMuIEZ1cnRoZXJtb3JlLCB0aGUgdW5pdCBmb2N1c2VzIG9uIG1ham9yIGRpZ2l0YWwgbWFya2V0aW5nIHRvb2xzIGFuZCBzdHJhdGVnaWVzIChlLmcuLCBHb29nbGUgQWRXb3JkcyBhbmQgU2VhcmNoIEVuZ2luZSBPcHRpbWl6YXRpb24pIHRoYXQgYSBmaXJtIG9yIGJyYW5kIGNhbiBhZG9wdCB0byBlbmdhZ2Ugd2l0aCBjb25zdW1lcnMgYWNyb3NzIHRoZWlyIHB1cmNoYXNlIGpvdXJuZXkgdXNpbmcgdmFyaW91cyBkaWdpdGFsIGNoYW5uZWxzIHN1Y2ggYXMgcGFpZCwgb3duZWQsIGFuZCBlYXJuZWQgbWVkaWEuDQoyNQ0KRnVsbHkgT25saW5lLEludGVybmFsDQoNCg0KDQpVTklUDQpNS1RHMTAwMA0KRGlzY292ZXJpbmcgTWFya2V0aW5nDQpVbmRlcnN0YW5kaW5nIHRoZSByb2xlIG1hcmtldGluZyBwbGF5cyBpbiBidXNpbmVzcyBhbmQgc29jaWV0eTsgVGhlIGdsb2JhbCBtYXJrZXRpbmcgZW52aXJvbm1lbnQ7IENvbnN1bWVyIGJ1eWVyIGJlaGF2aW91cjsgTWFya2V0IHNlZ21lbnRhdGlvbiwgdGFyZ2V0IG1hcmtldGluZyBhbmQgcG9zaXRpb25pbmc7IE5ldyBwcm9kdWN0IGRldmVsb3BtZW50IGFuZCB0aGUgcHJvZHVjdCBsaWZlIGN5Y2xlOyBNYXJrZXRpbmcgU3RyYXRlZ2llcyAodGhlIDQgUCdzKSAtIHByb2R1Y3QsIHByaWNlLCBwbGFjZSBhbmQgcHJvbW90aW9uOyBFdGhpY3MgaW4gbWFya2V0aW5nLg0KMjUNCkludGVybmFsLEZ1bGx5IE9ubGluZQ0KDQoNCg0KU1BFQ0lBTElaQVRJT04NClNQVUMtSk9VUkwNCkpvdXJuYWxpc20NClRoaXMgc3BlY2lhbGlzYXRpb24gc2V0cyB0aGUgZm91bmRhdGlvbnMgZm9yIHRoZSBzdHVkeSBvZiBwcmFjdGljYWwgam91cm5hbGlzbSBsZWFkaW5nIHRvIHRoZSBhY3F1aXNpdGlvbiBvZiBza2lsbHMgcmVsZXZhbnQgdG8gdGhlIGpvdXJuYWxpc20gcHJvZmVzc2lvbi4NCjEwMA0KRkFMU0UNCkpPVVIxMDAxLEpPVVIyMDAwLEpPVVIyMDAyLEpPVVIyMDAzDQoNCg0KDQpVTklUDQpKT1VSMTAwMQ0KSW50cm9kdWN0aW9uIHRvIEpvdXJuYWxpc20gLSBCcm9hZGNhc3QNCkFuIGV4YW1pbmF0aW9uIG9mIHRoZSBuYXR1cmUsIGhpc3RvcnkgYW5kIGZ1bmN0aW9uIG9mIGJyb2FkY2FzdCBqb3VybmFsaXNtIGluIEF1c3RyYWxpYSBieSBhbmFseXNpbmcgYW5kIGV2YWx1YXRpbmcgdGhlIHB1YmxpYywgY29tbXVuaXR5IGFuZCBjb21tZXJjaWFsIHNlY3RvcnMuIFN0dWRlbnRzIHdpbGwgZGlzc2VjdCBhbmQgZXZhbHVhdGUgYWxsIGFzcGVjdHMgb2YgYnJvYWRjYXN0IGpvdXJuYWxpc20gYW5kIGRldmVsb3AgdGhlaXIgbXVsdGktcGxhdGZvcm0gam91cm5hbGlzdGljIHNraWxsc2V0IGJ5IHByb2R1Y2luZyByZWNvcmRlZCByYWRpbyBzdG9yaWVzIGFuZCBhIHNtYXJ0LXBob25lIGVzc2F5Lg0KMjUNCkludGVybmFsDQoNCg0KSk9VUjUwMTMNClVOSVQNCkpPVVIyMDAwDQpSYWRpbyBOZXdzDQpUaGlzIHVuaXQgZXF1aXBzIHN0dWRlbnRzIHRvIHdvcmsgaW4gYSByYWRpbyBuZXdzcm9vbSBlbnZpcm9ubWVudCBwZXJmb3JtaW5nIGEgcmFuZ2Ugb2YgdGFza3MgaW4gdGhlIGRldmVsb3BtZW50IG9mIGNvbXBsZXggcmFkaW8gbmV3cyBzdG9yaWVzLiBTdHVkZW50cyB3aWxsIHVuZGVydGFrZSBpbnRlbnNpdmUgdHVpdGlvbiBpbiBkaWdpdGFsIHJlY29yZGluZywgZWRpdGluZyBhbmQgcHJvZHVjdGlvbiB1c2luZyBpbmR1c3RyeSBzdGFuZGFyZCBlcXVpcG1lbnQsIGVuc3VyaW5nIHRoZXkgYXJlIGFibGUgdG8gcmVhY3QgdG8gdGhlIGRlbWFuZHMgb2YgdGhlIG1vZGVybiBuZXdzIGVudmlyb25tZW50LiBUaGUgdW5pdCB3aWxsIGVuY291cmFnZSBzdHVkZW50cyB0byBkZXZlbG9wIGNyaXRpY2FsIHRoaW5raW5nIHNraWxscyBhbmQgZXN0YWJsaXNoIHByb2Zlc3Npb25hbCBwcmFjdGljZXMgd2l0aGluIGpvdXJuYWxpc20ncyBldGhpY2FsIGFuZCBsZWdhbCBwYXJhbWV0ZXJzLCB3aGlsZSB3b3JraW5nIGJvdGggaW5kZXBlbmRlbnRseSBhbmQgY29sbGFib3JhdGl2ZWx5IHdpdGhpbiBhIG5ld3MgdGVhbS4NCjI1DQpJbnRlcm5hbA0KSk9VUjEwMDE7MTU2NA0KDQpKT1VSNTAwMg0KVU5JVA0KSk9VUjIwMDINClZpZGVvIE5ld3MNClRoaXMgdW5pdCBpbnRyb2R1Y2VzIHN0dWRlbnRzIHRvIHRoZSB0aGVvcnkgYW5kIHByYWN0aWNlIG9mIHZpZGVvIG5ld3MgcHJvZHVjdGlvbiBmb3IgdGhlIHdlYiBhbmQgdGVsZXZpc2lvbi4gSXQgZXF1aXBzIHN0dWRlbnRzIHdpdGggdGhlIGNhcGFjaXR5IHRvIGRldmVsb3AgcmVzZWFyY2gsIHdyaXRpbmcsIGludGVydmlld2luZyBhbmQgcHJlc2VudGF0aW9uIHNraWxscyBmb3IgdmlkZW8gbmV3cyBwcm9kdWN0aW9ucyBhY3Jvc3MgcGxhdGZvcm1zLiBUaGlzIHVuaXQgYWxzbyBpbnRyb2R1Y2VzIGJhc2ljIGNvbXBldGVuY2llcyBpbiBjYW1lcmF3b3JrIGFuZCBlZGl0aW5nLg0KMjUNCkludGVybmFsDQpKT1VSMTAwMTsxNTY0DQoNCkpPVVI1MDA1DQpVTklUDQpKT1VSMjAwMw0KTmV3cyBXcml0aW5nIGFuZCBSZXBvcnRpbmcNCkFuIGludHJvZHVjdGlvbiB0byBuZXdzIHdyaXRpbmcgYW5kIHJlcG9ydGluZyBmb3IgcHVibGljYXRpb24sIHdoZXJlYnkgc3R1ZGVudHMgZGV2ZWxvcCBuZXdzIGdhdGhlcmluZywgd3JpdGluZyBhbmQgcmVzZWFyY2ggc2tpbGxzIGFuZCBhbiBhd2FyZW5lc3Mgb2YgZGlmZmVyZW50IHN0eWxlcyBhbmQgZ2VucmVzIHdpdGhpbiBwcmludCBhbmQgb25saW5lIGpvdXJuYWxpc20uICBTdHVkZW50cyBsZWFybiBob3cgdG8gZ2VuZXJhdGUgaWRlYXMsIHVuZGVydGFrZSByZXNlYXJjaCwgY29uZHVjdCBpbnRlcnZpZXdzIGFuZCB3cml0ZSBpbiBuZXdzIHN0eWxlIHRvIHRpZ2h0IGRlYWRsaW5lcy4gIFRoZSBoaWdobHkgcHJhY3RpY2FsIG5hdHVyZSBvZiB0aGUgdW5pdCBwcm92aWRlcyBzdHVkZW50cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZXhwZXJpZW5jZSB3b3JrLWludGVncmF0ZWQgbGVhcm5pbmcgdGhyb3VnaCBhY3RpbmcgYXMgcmVwb3J0ZXJzIGZvciB0aGUgRGVwYXJ0bWVudCBvZiBKb3VybmFsaXNt4oCZcyBvbmxpbmUgcHVibGljYXRpb24uDQoyNQ0KSW50ZXJuYWwNCkpPVVIxMDAxDQoNCkpPVVI1MDAzDQpTUEVDSUFMSVpBVElPTg0KU1BVQy1QUldSSQ0KUHJvZmVzc2lvbmFsIFdyaXRpbmcNClRoaXMgc3BlY2lhbGlzYXRpb24gY292ZXJzIHRoZSBzdHVkeSBhbmQgcHJhY3RpY2Ugb2YgYSByYW5nZSBvZiBkaWZmZXJlbnQgd3JpdGluZyBmb3JtcyBpbmNsdWRpbmcgbm9uLWZpY3Rpb24gd3JpdGluZywgZWRpdGluZyBhbmQgcHVibGlzaGluZyBza2lsbHMuDQoxMDANCkZBTFNFDQpQV1JQMTAwMCxQV1JQMTAwMyxQV1JQMjAwMSxQV1JQMjAwMA0KDQoNCg0KVU5JVA0KUFdSUDEwMDANCkludHJvZHVjdGlvbiB0byBDcmVhdGl2ZSBhbmQgUHJvZmVzc2lvbmFsIFdyaXRpbmcNClRoaXMgdW5pdCBleHBsb3JlcyByZXByZXNlbnRhdGlvbiBpbiB3cml0aW5nIGFuZCBob3cgdGhlIGR5bmFtaWMgcmVsYXRpb25zaGlwIGJldHdlZW4gU2VsZiBhbmQgT3RoZXIgcGxheXMgYSBjZW50cmFsIHJvbGUgaW4gdGhlIHdyaXRpbmcgcHJvY2Vzcy4gVGhlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzZWxmIGFuZCBvZiBvdGhlcnMgaXMgY2VudHJhbCB0byBhIGJyb2FkIHJhbmdlIG9mIHdyaXR0ZW4gZ2VucmVzIGFuZCBmb3Jtcy4gU3R1ZGVudHMgb2Ygd3JpdGluZyB3aWxsIGZpbmQgdGhhdCB0aGUgdW5pdCBpbnRyb2R1Y2VzIHRoZW0gdG8gYSB2YXJpZXR5IG9mIGdlbnJlcyBhbmQgZm9ybXMgZXNzZW50aWFsIHRvIHRoZSBwb3J0Zm9saW8gb2YgYSBwcm9mZXNzaW9uYWwgd3JpdGVyLCBhbmQgd2lsbCBkaXNjb3ZlciBob3cgY3JlYXRpdmUgd3JpdGluZyB0ZWNobmlxdWVzIGNhbiBlbnJpY2ggdGhlaXIgcHJvZmVzc2lvbmFsIHdvcmsuDQoyNQ0KSW50ZXJuYWwNCg0KDQpQV1JQNTAyMQ0KVU5JVA0KUFdSUDEwMDMNCldyaXRpbmcsIFJoZXRvcmljIGFuZCBQZXJzdWFzaW9uDQpUaGlzIHVuaXQgaW50cm9kdWNlcyBzdHVkZW50cyB0byB0aGUgcm9sZSBvZiB0aGUgcHJvZmVzc2lvbmFsIHdyaXRlciBpbiB0aGUgZmllbGQgb2YgcHVibGljIGRpc2NvdXJzZS4gSXQgb2ZmZXJzIGNyaXRpY2FsIGFuZCBldGhpY2FsIHBlcnNwZWN0aXZlcyBvbiByaGV0b3JpYyBhbmQgcGVyc3Vhc2lvbiwgYW5kIGludHJvZHVjZXMgc3R1ZGVudHMgdG8gdGhlIHN0cnVjdHVyaW5nIG9mIGFyZ3VtZW50cywgYW5kIHRoZSBmcmFtaW5nIGFuZCBjb21tdW5pY2F0aW9uIG9mIGlzc3VlcyBvbiBiZWhhbGYgb2YgZ292ZXJubWVudCwgaW5kdXN0cnksIG5vbi1nb3Zlcm5tZW50IG9yZ2FuaXNhdGlvbnMsIGFuZCBpbmRpdmlkdWFscy4NCjI1DQpJbnRlcm5hbA0KDQoNClBXUlA1MDIyDQpVTklUDQpQV1JQMjAwMQ0KV3JpdGluZywgRWRpdGluZyBhbmQgUHVibGlzaGluZw0KVGhpcyB1bml0IHByb3ZpZGVzIGEgcHJhY3RpY2FsIGludHJvZHVjdGlvbiB0byBlZGl0aW5nLiBTdHVkZW50cyBsZWFybiBhYm91dCB0aGUgZWRpdG9y4oCZcyByb2xlIGFuZCBwcm9mZXNzaW9uLCB0aGUgcHVibGlzaGluZyBwcm9jZXNzLCBhbmQgZWRpdG9yaWFsIHByb2plY3QgbWFuYWdlbWVudDsgYW5kIHRoZXkgbGVhcm4gYW5kIHByYWN0aWNlIHRoZSBza2lsbHMgbmVlZGVkIGZvciBwcm9mZXNzaW9uYWwgcHJvb2ZyZWFkaW5nIGFuZCBjb3B5ZWRpdGluZywgaW5jbHVkaW5nIGxhbmd1YWdlIHNraWxscywgb24gdGhlIHBhZ2UgYW5kIHRoZSBzY3JlZW4uIFN0dWRlbnQgbGVhcm5pbmcgaXMgZ3JhZHVhdGVkIHRocm91Z2ggYSBzZXJpZXMgb2Ygc3VjY2Vzc2l2ZWx5IGhpZ2hlci1sZXZlbCBlZGl0aW5nIHRhc2tzLCB3aGljaCBzdHVkZW50cyBwcmFjdGljZSB0aG9yb3VnaGx5IGluIHdvcmtzaG9wcywgYW5kIGFyZSBhc3Nlc3NlZCBpbiBiZWZvcmUgbW92aW5nIHRvIGEgaGlnaGVyIGxldmVsLg0KMjUNCkludGVybmFsDQoNCg0KUFdSUDUwMDMNClVOSVQNClBXUlAyMDAwDQpUcmlja3Mgb2YgVHJ1dGggYW5kIEF1dGhlbnRpY2l0eQ0KVGhpcyB1bml0IGV4cGxvcmVzIGlzc3VlcyBvZiB0cnV0aCBhbmQgYXV0aGVudGljaXR5IGluIHByb2Zlc3Npb25hbCB3cml0aW5nIGFuZCBwdWJsaXNoaW5nLCBwcm92aWRpbmcgc3R1ZGVudHMgd2l0aCBhbiB1bmRlcnN0YW5kaW5nIG9mIHRoZSBjdWx0dXJhbCwgZXRoaWNhbCBhbmQgbGVnYWwgaXNzdWVzIG9mIHdyaXRpbmcgZm9yIHB1YmxpY2F0aW9uLiBIaXN0b3JpY2FsIGFuZCBjb250ZW1wb3JhcnkgY2FzZXMgb2YgZnJhdWQsIGZha2VkIGlkZW50aXR5LCBwbGFnaWFyaXNtLCBob2F4LCB0aGUgcm9sZSBvZiB0aGUgYXV0aG9yIGFuZCB0aGUgYmx1cnJpbmcgb2YgZ2VucmUgYm91bmRhcmllcyBhcmUgdXNlZCB0byBoaWdobGlnaHQgdGhlIHByb2Zlc3Npb25hbCBhbmQgcGVyc29uYWwgcmVzcG9uc2liaWxpdGllcyBhbmQgZGlsZW1tYXMgb2Ygd3JpdGluZyBhbmQgcHVibGlzaGluZyBpbiB0aGUgcHVibGljIGRvbWFpbi4NCjI1DQpJbnRlcm5hbA0KDQoNClBXUlA1MDAxDQpTUEVDSUFMSVpBVElPTg0KU1BVQy1ITFREQQ0KSGVhbHRoIERhdGENClRoaXMgc3BlY2lhbGlzYXRpb24gYWxsb3dzIHVuZGVyZ3JhZHVhdGUgc3R1ZGVudHMgdG8gY29tYmluZSBzdHVkaWVzIGluIGhlYWx0aCBkYXRhIChpbmNsdWRpbmcgYmlvc3RhdGlzdGljcywgZXBpZGVtaW9sb2d5LCByZXNlYXJjaCBkZXNpZ24gYW5kIGhlYWx0aCBjYXJlIHN5c3RlbXMpLiBUaGUgc3BlY2lhbGlzYXRpb24gY29uc2lzdHMgb2YgZm91ciB1bml0cyBkZWFsaW5nIHdpdGggYmlnIGRhdGEsIGhlYWx0aCBnb3Zlcm5hbmNlLCBHZW9ncmFwaGljIEluZm9ybWF0aW9uIFN5c3RlbSAoR0lTKSwgdmlzdWFsaXNhdGlvbiBhbmQgdGhlIGFwcGxpY2F0aW9uIG9mIGhlYWx0aCBkYXRhIHByb2R1Y2VkIGJ5IG1hY2hpbmUgbGVhcm5pbmcgYW5kIGFydGlmaWNpYWwgaW50ZWxsaWdlbmNlLiBUaGUgc3R1ZGVudHMgZW5yb2xsZWQgaW4gdGhlIHNwZWNpYWxpc2F0aW9uIHdpbGwgYWxzbyBzdHVkeSBleGlzdGluZyB1bml0cyBpbiBiaW9zdGF0aXN0aWNzLCBlcGlkZW1pb2xvZ3ksIHJlc2VhcmNoIGRlc2lnbiBhbmQgaGVhbHRoIGNhcmUgc3lzdGVtcy4NCjEwMA0KRkFMU0UNClBVQkgyMDA1LFNQQVQxMDA3LFBVQkgyMDA2LFBVQkgzMDA2DQoNCg0KDQpVTklUDQpQVUJIMjAwNQ0KQmlnIERhdGEgYW5kIEhlYWx0aA0KVGhpcyB1bml0IHdpbGwgcHJvdmlkZSB0aGUgb3Bwb3J0dW5pdHkgZm9yIHN0dWRlbnRzIHRvIGxlYXJuIGhvdyB0byB1c2UgYmlnIGRhdGEgdG8gY29tcHJlaGVuZCBjb21wbGV4IHJlYWwtd29ybGQgaGVhbHRoIGNoYWxsZW5nZXMuIEl0IHByb3ZpZGVzIGFuIGludHJvZHVjdGlvbiB0byBob3cgZGF0YSBhcmUgZ2VuZXJhdGVkIGFuZCB1c2VkIGluIGhlYWx0aCBjb250ZXh0cy4gSXQgZ2l2ZXMgc3R1ZGVudHMgdGhlIG9wcG9ydHVuaXR5IHRvIGludmVzdGlnYXRlIHRoZSBtYWpvciBzb3VyY2VzIG9mIGRhdGEgcmVsZXZhbnQgdG8gaGVhbHRoIGFuZCBleHBsb3JlIGhvdyB0aGlzIGluZm9ybWF0aW9uIGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBldmlkZW5jZSBmb3IgcG9saWN5LCByZXNlYXJjaCBhbmQgaW5kaXZpZHVhbCBiZWhhdmlvdXIgY2hhbmdlLg0KMjUNCkZ1bGx5IE9ubGluZSxJbnRlcm5hbA0KDQoNCg0KVU5JVA0KU1BBVDEwMDcNCkZ1bmRhbWVudGFscyBvZiBHZW9ncmFwaGljIEluZm9ybWF0aW9uIFN5c3RlbXMNClRoaXMgdW5pdCBpcyBhbiBpbnRyb2R1Y3Rpb24gdG8gdGhlIGFwcGxpY2F0aW9uLCBzdHJ1Y3R1cmUgYW5kIGZ1bmN0aW9uIG9mIGdlb2dyYXBoaWMgaW5mb3JtYXRpb24gc3lzdGVtcyAoR0lTKS4gU3R1ZGVudHMgd2lsbCBkZXZlbG9wIHNraWxscyBhbmQga25vd2xlZGdlIGFyb3VuZCB0aGUgaW5wdXQgYW5kIG1hbmFnZW1lbnQsIGFuYWx5c2lzIGFuZCBwcmVzZW50YXRpb24gb2YgZ2VvZ3JhcGhpYyBkYXRhIGFuZCByZWxhdGlvbnNoaXBzLiBUaGV5IHdpbGwgYWxzbyBkZXZlbG9wIGV4cGVydGlzZSBpbiB0aGUgc3RvcmFnZSBhbmQgc2ltcGxlIG1hbmlwdWxhdGlvbiBvZiBzcGF0aWFsIGRhdGEgdG9nZXRoZXIgd2l0aCB0aGUgaW50ZWdyYXRpb24gYW5kIG1hbmFnZW1lbnQgb2Ygc3BhdGlhbCBhbmQgYXR0cmlidXRlIGRhdGEuIFRoZXJlIHdpbGwgYmUgYSBwYXJ0aWN1bGFyIGZvY3VzIGluIHRoaXMgdW5pdCBvbiB0aGUgYXBwbGljYXRpb24gb2YgdGhlIHByaW5jaXBsZXMgb2YgYWNhZGVtaWMgaW50ZWdyaXR5IGFuZCBhY2FkZW1pYyByZWZlcmVuY2luZyBjb252ZW50aW9ucy4NCjI1DQpGdWxseSBPbmxpbmUsSW50ZXJuYWwNCg0KDQpTUEFUNTAwNixTUEFUMjAxMQ0KVU5JVA0KUFVCSDIwMDYNClByaXZhY3kgYW5kIEN5YmVyIFNlY3VyaXR5OiBIZWFsdGggRGF0YSBHb3Zlcm5hbmNlDQpUaGlzIHVuaXQgd2lsbCBpbnRyb2R1Y2Ugc3R1ZGVudHMgdG8gaGVhbHRoIGRhdGEgZ292ZXJuYW5jZSwgaW5jbHVkaW5nIHJlbGV2YW50IHByaXZhY3kgYW5kIGRhdGEgcHJvdGVjdGlvbiBsYXcuIFN0dWRlbnRzIHdpbGwgZXhwbG9yZSBjb250ZW1wb3JhcnkgY29uY2VybnMgYWJvdXQgdGhlIGNvbGxlY3Rpb24sIGxpbmthZ2UsIHN0b3JhZ2UgYW5kIHVzZSBvZiBoZWFsdGggZGF0YSBpbmNsdWRpbmcgdHJhbnNwYXJlbmN5LCBpbmZvcm1lZCBjb25zZW50LCBjb25maWRlbnRpYWxpdHksIHRoaXJkIHBhcnR5IGFjY2VzcyBhbmQgdGhlIGFwcGxpY2F0aW9uIG9mIGFydGlmaWNpYWwgaW50ZWxsaWdlbmNlLiBUaGV5IHdpbGwgYWxzbyBlbmdhZ2Ugd2l0aCBpc3N1ZXMgb2YgZGF0YSBwcml2YWN5IGFuZCBwcm90ZWN0aW9uLg0KMjUNCkludGVybmFsLEZ1bGx5IE9ubGluZQ0KDQoNCg0KVU5JVA0KUFVCSDMwMDYNCkludHJvZHVjdGlvbiB0byBBcnRpZmljaWFsIEludGVsbGlnZW5jZSwgTWFjaGluZSBMZWFybmluZyBhbmQgSGVhbHRoDQpUaGlzIHVuaXQgaW50cm9kdWNlcyBzdHVkZW50cyB0byB0aGUgZnVuZGFtZW50YWwgY29uY2VwdHMgb2YgbWFjaGluZSBsZWFybmluZyAoTUwpIGFuZCBhcnRpZmljaWFsIGludGVsbGlnZW5jZSAoQUkpLiBTdHVkZW50cyB3aWxsIGhhdmUgdGhlIG9wcG9ydHVuaXR5IHRvIGV4cGxvcmUgdGhlIHVzZXMgYW5kIGltcGFjdCBvZiBtYWNoaW5lIGxlYXJuaW5nIGFuZCBhcnRpZmljaWFsIGludGVsbGlnZW5jZSBpbiBwdWJsaWMgaGVhbHRoIGFuZCBoZWFsdGggY2FyZS4gVGhleSB3aWxsIGFkZHJlc3MgdGhlIGFkdmFudGFnZXMsIGxpbWl0YXRpb25zIGFuZCBzY29wZSBvZiBNTC9BSSBmcm9tIGEgaGVhbHRoIHBlcnNwZWN0aXZlLiBUaGUgdW5pdCB3aWxsIGFsc28gaGF2ZSBhIHByYWN0aWNhbCBjb21wb25lbnQgaW4gd2hpY2ggc3R1ZGVudHMgdXNlIHRoZSBkYXRhIGdlbmVyYXRlZCBieSBNTC9BSSB0byBleHBsb3JlIGNvbnRlbXBvcmFyeSBoZWFsdGggaXNzdWVzLg0KMjUNCkludGVybmFsDQpQVUJIMjAwNQ0KDQoNClVOSVQNCkZPUlMxMDA1DQpGb3VuZGF0aW9ucyBvZiBGb3JlbnNpYyBTY2llbmNlDQpGb3VuZGF0aW9ucyBvZiBGb3JlbnNpYyBTY2llbmNlIGlzIGEgZ2VuZXJhbCBpbnRyb2R1Y3Rpb24gdG8gdGhlIGhpc3RvcnksIHVuZGVybHlpbmcgcHJpbmNpcGxlcyBhbmQgY29udGVtcG9yYXJ5IGlzc3VlcyBpbiBmb3JlbnNpYyBzY2llbmNlLiBJdCB3aWxsIHByb3ZpZGUgYW4gb3ZlcnZpZXcgb2YgdGhlIGZvcmVuc2ljIHByb2Nlc3MgZnJvbSBjcmltZSBzY2VuZSB0byBjb3VydCBhbmQgdGhlIHJvbGUgb2YgdGhlIGZvcmVuc2ljIHNjaWVudGlzdCBhcyBhbiBleHBlcnQgd2l0bmVzcy4gSXQgYWxzbyBpbmNsdWRlcyBhbiBpbnRyb2R1Y3Rpb24gdG8gZm9yZW5zaWMgYW5hbHlzaXMgYW5kIGludGVycHJldGF0aW9uIGFzIGlsbHVzdHJhdGVkIGJ5IHNlbGVjdGVkIGNhc2Ugc3R1ZGllcy4gU3R1ZGVudHMgYXR0ZW5kIGEgdHdvLWhvdXIgc2VtaW5hciBwZXIgd2VlayBhbmQgYSBvbmUtaG91ciB3b3Jrc2hvcCBmb3J0bmlnaHRseSB3aXRoIHN1cHBvcnRpbmcgb25saW5lIG1hdGVyaWFsLg0KMjUNCkludGVybmFsDQoNCg0KDQpVTklUDQpQU1lDMTAwMA0KSW50cm9kdWN0aW9uIHRvIFBzeWNob2xvZ3kNCkJyb2FkIG91dGxpbmUgb2YgdGhlIG5hdHVyZSwgbWV0aG9kcywgYW5kIGZpZWxkcyBvZiBwc3ljaG9sb2d5LiBJbnRyb2R1Y3Rpb24gdG8gcHN5Y2hvbG9neSBhbmQgbWV0aG9kb2xvZ2ljYWwgaXNzdWVzIHJlbGF0ZWQgdG8gdGhlIHN0dWR5IG9mIGh1bWFuIGJlaW5ncyBhbmQgdGhlIHJlbGV2YW5jZSBvZiBib3RoIGZvciBpbnRlcmFjdGlvbnMgd2l0aCBpbmRpdmlkdWFscyBhbmQgZ3JvdXBzLiBJbnRyb2R1Y3Rpb24gdG8gc29jaWFsIHBzeWNob2xvZ3ksIHBlcnNvbmFsaXR5LCBkZXZlbG9wbWVudCwgbGVhcm5pbmcsIG1lbW9yeSwgYW5kIG1vdGl2YXRpb24uDQoyNQ0KSW50ZXJuYWwsRnVsbHkgT25saW5lDQoNCg0KDQpVTklUDQpDSEVNMTAwNg0KUGhhcm1hY2V1dGljYWwgQ2hlbWlzdHJ5DQpUaGlzIHVuaXQgcHJvdmlkZXMgYW4gaW50cm9kdWN0aW9uIHRvIGNvcmUgY29uY2VwdHMgd2l0aGluIHBoYXJtYWNldXRpY2FsIGNoZW1pc3RyeS4gU3R1ZGVudHMgd2lsbCBiZSBpbnRyb2R1Y2VkIHRvIHRoZSBwcmluY2lwYWwgbGFib3JhdG9yeSB0ZWNobmlxdWVzIHVzZWQgZm9yIGRydWcgYW5hbHlzaXMgYW5kIGxlYXJuIGFib3V0IGEgcmFuZ2Ugb2YgcGh5c2lvLWNoZW1pY2FsIGRydWcgcHJvcGVydGllcyB3aGljaCBpbmZsdWVuY2UgdGhlaXIgcGhhcm1hY2V1dGljYWwgZm9ybXVsYXRpb24sIHBoYXJtYWNvbG9neSBhbmQgY2xpbmljYWwgdXNlLiAgVGhpcyB1bml0IGlzIGRpdmlkZWQgaW50byB0d28gbGVhcm5pbmcgbW9kdWxlcy4gTW9kdWxlIDE6IFRpdHJpbWV0cmljIGFuYWx5c2lzIG9mIGRydWdzLCBzcGVjdHJvcGhvdG9tZXRyaWMgYW5hbHlzaXMgb2YgZHJ1Z3MsIGNocm9tYXRvZ3JhcGhpYyBhbmFseXNpcyBvZiBkcnVncywgYW5hbHlzaXMgb2YgZHJ1ZyBmb3JtdWxhdGlvbnMuIE1vZHVsZSAyOiBLZXkgZnVuY3Rpb25hbCBncm91cHMgaW4gZHJ1Z3MsIGRydWcgaW9uaXNhdGlvbiwgZHJ1ZyBzb2x1YmlsaXR5LCBkcnVnIHN0ZXJlb2NoZW1pc3RyeSwgZHJ1ZyBzdGFiaWxpdHkuDQoyNQ0KSW50ZXJuYWwNCkJDQ0IyMDAwDQoNCg0KVU5JVA0KUEhBUjIwMDANCkZvdW5kYXRpb25zIG9mIFBoYXJtYWNldXRpY3MNClRoaXMgdW5pdCBpbnRyb2R1Y2VzIHN0dWRlbnRzIHRvIHRoZSBwaGFybWFjZXV0aWNhbCBzY2llbmNlIGFuZCBmb3JtdWxhdGlvbiBvZiBsaXF1aWQgYW5kIHNvbGlkIGRvc2FnZSBmb3JtcyBQaGFybWFjZXV0aWNhbCBzY2llbmNlIGFzcGVjdHM6IFBoeXNpY29jaGVtaWNhbCBwcm9wZXJ0aWVzIG9mIHBoYXJtYWNldXRpY2FsIHNvbGlkcyBpbmNsdWRpbmcgY3J5c3RhbGxpbmUgZm9ybSwgc29sdWJpbGl0eSBhbmQgZGlzdHJpYnV0aW9uLiBQb3dkZXIgdGVjaG5vbG9neSBpbmNsdWRpbmcgcGFydGljbGUgc2l6ZSBhbmFseXNpcywgcGFydGljbGUgc2l6ZSByZWR1Y3Rpb24sIHBvd2RlciBtaXhpbmcgYW5kIGRyeWluZy4gUGh5c2ljb2NoZW1pY2FsIHByb3BlcnRpZXMgb2YgcGhhcm1hY2V1dGljYWwgc29sdXRpb25zIGluY2x1ZGluZyBzb2x2ZW50cywgZWZmZWN0cyBvZiBwSCwgYnVmZmVycywgcGhhc2UgcnVsZSBhbmQgcGhhc2UgZGlhZ3JhbXMuIEZvcm11bGF0aW9uIGFzcGVjdHM6IEZvcm11bGF0aW9uLCBwcmVwYXJhdGlvbiBhbmQgZXZhbHVhdGlvbiBvZiBzb2xpZCBvcmFsIGRvc2FnZSBmb3JtcyBhbmQgcGhhcm1hY2V1dGljYWwgc29sdXRpb25zLiBQcmluY2lwbGVzIG9mIHByZXNlcnZhdGlvbiwgZmxhdm91cmluZywgY29sb3VyaW5nIGFuZCBzdGFiaWxpc2F0aW9uIG9mIHBoYXJtYWNldXRpY2FsIHNvbHV0aW9ucy4NCjI1DQpJbnRlcm5hbA0KQ0hFTTEwMDYNCg0KDQpVTklUDQpQSEFSMjAwMQ0KUGhhcm1hY2V1dGljYWwgRm9ybXVsYXRpb24NClRoaXMgdW5pdCBpbnRyb2R1Y2VzIHN0dWRlbnRzIHRvIHRoZSBwaGFybWFjZXV0aWNhbCBzY2llbmNlIGFuZCBmb3JtdWxhdGlvbiBvZiBsaXF1aWQtaW4tbGlxdWlkLCBzb2xpZC1pbi1saXF1aWQsIHNvbGlkIGFuZCBzZW1pLXNvbGlkIGRvc2FnZSBmb3Jtcy4gUGhhcm1hY2V1dGljYWwgU2NpZW5jZSBhc3BlY3RzOiBzdXJmYWNlIHBoZW5vbWVuYSwgc3VyZmFjZSBhbmQgaW50ZXJmYWNpYWwgdGVuc2lvbjsgc3VyZmFjdGFudHMsIG1pY2VsbGUgZm9ybWF0aW9uOyBwcm9wZXJ0aWVzIG9mIGNvbGxvaWRzIGFuZCByaGVvbG9neS4gRm9ybXVsYXRpb24gQXNwZWN0czogRm9ybXVsYXRpb24sIHByZXBhcmF0aW9uIGFuZCBldmFsdWF0aW9uIG9mIHNlbWktc29saWQgZG9zYWdlIGZvcm1zLCBzdXBwb3NpdG9yaWVzIGFuZCB0d28gcGhhc2UgbGlxdWlkLWJhc2VkIHByZXBhcmF0aW9ucy4gUHJlc2VydmF0aW9uIG9mIHR3byBwaGFzZSBzeXN0ZW1zLg0KMjUNCkludGVybmFsDQpQSEFSMjAwMDszMTAzODQNCg0KDQpVTklUDQpQVUJIMTAwMQ0KSW50cm9kdWN0aW9uIHRvIEhlYWx0aCwgU2FmZXR5IGFuZCBFbnZpcm9ubWVudA0KQSBicm9hZCBvdmVydmlldyBvZiBzZWxlY3RlZCBkaXNjaXBsaW5lcyB3aXRoaW4gdGhlIGZpZWxkIG9mIGhlYWx0aCwgc2FmZXR5IGFuZCBlbnZpcm9ubWVudC4NCjI1DQpJbnRlcm5hbCxGdWxseSBPbmxpbmUNCg0KDQoNClVOSVQNClNUQVQxMDAzDQpJbnRyb2R1Y3Rpb24gdG8gRGF0YSBTY2llbmNlDQpUaGlzIHVuaXQgd2lsbCBwcm92aWRlIGEgYnJvYWQgaW50cm9kdWN0aW9uIHRvIGZvdXIga2V5IGFzcGVjdHMgb2YgZGF0YSBzY2llbmNlOiBkYXRhIHJldHJpZXZhbCBhbmQgbWFuaXB1bGF0aW9uLCBkYXRhIHZpc3VhbGlzYXRpb24sIHN0YXRpc3RpY2FsIGNvbXB1dGF0aW9uIGFuZCBtYWNoaW5lIGxlYXJuaW5nLCBhbmQgcHJlc2VudGF0aW9uIGFuZCBjb21tdW5pY2F0aW9uLiBTdHVkZW50cyB3aWxsIHVzZSBkYXRhIGZyb20gYSB2YXJpZXR5IG9mIHNvdXJjZXMsIGJlIGludHJvZHVjZWQgdG8gY29udGVtcG9yYXJ5IGNvbXB1dGluZyBhbmQgZGF0YWJhc2UgZW52aXJvbm1lbnRzIHN1Y2ggYXMgUiBhbmQgU1FMLCBhbmQgYmUgZXhwb3NlZCB0byBjYXNlIHN0dWRpZXMgZnJvbSBvdXRzaWRlIHRoZSBjbGFzc3Jvb20uIFRocm91Z2ggdGhpcyB1bml0IHN0dWRlbnRzIHdpbGwgYmVjb21lIGFjcXVhaW50ZWQgd2l0aCB0aGUgY2hhbGxlbmdlcyBvZiBjb250ZW1wb3JhcnkgZGF0YSBzY2llbmNlIGFuZCBnYWluIGFuIGFwcHJlY2lhdGlvbiBvZiB0aGUgZm91bmRhdGlvbmFsIHNraWxscyBuZWNlc3NhcnkgdG8gdHVybiBkYXRhIGludG8gaW5mb3JtYXRpb24uDQoyNQ0KSW50ZXJuYWwNCg0KDQoNClVOSVQNCklTRUMyMDAxDQpGdW5kYW1lbnRhbCBDb25jZXB0cyBvZiBEYXRhIFNlY3VyaXR5DQpUaGlzIHVuaXQgd2lsbCBjb3ZlciB0aGUgY29yZSBpbmZvcm1hdGlvbiBzZWN1cml0eSBwcmluY2lwbGVzIG9mIGNvbmZpZGVudGlhbGl0eSwgaW50ZWdyaXR5IGFuZCBhdmFpbGFiaWxpdHkuIFRoZXNlIGNvcmUgcHJpbmNpcGxlcyB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGNvbmNlcHRzIG9mIGluZm9ybWF0aW9uIHJpc2sgbWFuYWdlbWVudCwgYW5kIHRoZSBhbmFseXNpcyBhbmQgaGFuZGxpbmcgb2YgY29tcHJvbWlzZWQgc3lzdGVtcy4gVGhlIGV0aGljcyBhcm91bmQgY29tcHV0ZXIgY3JpbWUsIHByaXZhY3ksIGFuZCBpbnRlbGxlY3R1YWwgcHJvcGVydHkgYXJlIGNvdmVyZWQgaW4gZGV0YWlsLiBGaW5hbGx5LCB0aGUgdW5pdCB3aWxsIGNvdmVyIHRoZSBjcml0ZXJpYSBhbmQgY29udHJvbHMgZm9yIGluZm9ybWF0aW9uIGNsYXNzaWZpY2F0aW9uLg0KMjUNCkludGVybmFsDQoNCg0KDQpVTklUDQpDT01QMTAwNQ0KRnVuZGFtZW50YWxzIG9mIFByb2dyYW1taW5nDQpUaGlzIHVuaXQgYWltcyBhdCBlcXVpcHBpbmcgc3R1ZGVudHMgd2l0aCB0aGUgYWJpbGl0eSB0byB3cml0ZSBzaW1wbGUgcHJvZ3JhbXMgYXMgcGFydCBvZiBtYW5hZ2luZyBsYXJnZSB2b2x1bWVzIG9mIGRhdGEuIFRvcGljcyBpbmNsdWRlIGRhdGEgcmVwcmVzZW50YXRpb24gaW4gYSBjb21wdXRlciwgYWxnb3JpdGhtIGRlc2lnbiwgc3VibW9kdWxlcywgQm9vbGVhbiBleHByZXNzaW9ucywgc2VsZWN0aW9uIGFuZCByZXBldGl0aW9uIGNvbnRyb2wgc3RydWN0dXJlcywgYmFzaWMgT2JqZWN0IE9yaWVudGVkIHByb2dyYW1taW5nIGRlc2lnbiBhbmQgRmlsZSBJL08uIFRoZXNlIHdpbGwgYmUgZGlzY3Vzc2VkIGluIHRoZSBjb250ZXh0IG9mIGltcGxlbWVudGF0aW9uIGluIHRoZSBQeXRob24gcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UuDQoyNQ0KSW50ZXJuYWwNCg0KDQpDT01QMTAwMTtDT01QMTAwNztDT01QNTAwNQ==\" }"
}